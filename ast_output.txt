Module(
  body=[
    Import(
      names=[
        alias(name='datetime')]),
    Import(
      names=[
        alias(name='importlib.resources')]),
    ImportFrom(
      module='datetime',
      names=[
        alias(name='datetime')],
      level=0),
    ImportFrom(
      module='typing',
      names=[
        alias(name='TYPE_CHECKING'),
        alias(name='List'),
        alias(name='Optional')],
      level=0),
    ImportFrom(
      module='langchain_core.messages',
      names=[
        alias(name='HumanMessage'),
        alias(name='SystemMessage')],
      level=0),
    If(
      test=Name(id='TYPE_CHECKING', ctx=Load()),
      body=[
        ImportFrom(
          module='browser_use.agent.views',
          names=[
            alias(name='ActionResult'),
            alias(name='AgentStepInfo')],
          level=0),
        ImportFrom(
          module='browser_use.browser.views',
          names=[
            alias(name='BrowserState')],
          level=0)],
      orelse=[]),
    ClassDef(
      name='SystemPrompt',
      bases=[],
      keywords=[],
      body=[
        FunctionDef(
          name='__init__',
          args=arguments(
            posonlyargs=[],
            args=[
              arg(arg='self'),
              arg(
                arg='action_description',
                annotation=Name(id='str', ctx=Load())),
              arg(
                arg='max_actions_per_step',
                annotation=Name(id='int', ctx=Load())),
              arg(
                arg='override_system_message',
                annotation=Subscript(
                  value=Name(id='Optional', ctx=Load()),
                  slice=Name(id='str', ctx=Load()),
                  ctx=Load())),
              arg(
                arg='extend_system_message',
                annotation=Subscript(
                  value=Name(id='Optional', ctx=Load()),
                  slice=Name(id='str', ctx=Load()),
                  ctx=Load()))],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[
              Constant(value=10),
              Constant(value=None),
              Constant(value=None)]),
          body=[
            Assign(
              targets=[
                Attribute(
                  value=Name(id='self', ctx=Load()),
                  attr='default_action_description',
                  ctx=Store())],
              value=Name(id='action_description', ctx=Load())),
            Assign(
              targets=[
                Attribute(
                  value=Name(id='self', ctx=Load()),
                  attr='max_actions_per_step',
                  ctx=Store())],
              value=Name(id='max_actions_per_step', ctx=Load())),
            Assign(
              targets=[
                Name(id='prompt', ctx=Store())],
              value=Constant(value='')),
            If(
              test=Name(id='override_system_message', ctx=Load()),
              body=[
                Assign(
                  targets=[
                    Name(id='prompt', ctx=Store())],
                  value=Name(id='override_system_message', ctx=Load()))],
              orelse=[
                Expr(
                  value=Call(
                    func=Attribute(
                      value=Name(id='self', ctx=Load()),
                      attr='_load_prompt_template',
                      ctx=Load()),
                    args=[],
                    keywords=[])),
                Assign(
                  targets=[
                    Name(id='prompt', ctx=Store())],
                  value=Call(
                    func=Attribute(
                      value=Attribute(
                        value=Name(id='self', ctx=Load()),
                        attr='prompt_template',
                        ctx=Load()),
                      attr='format',
                      ctx=Load()),
                    args=[],
                    keywords=[
                      keyword(
                        arg='max_actions',
                        value=Attribute(
                          value=Name(id='self', ctx=Load()),
                          attr='max_actions_per_step',
                          ctx=Load()))]))]),
            If(
              test=Name(id='extend_system_message', ctx=Load()),
              body=[
                AugAssign(
                  target=Name(id='prompt', ctx=Store()),
                  op=Add(),
                  value=JoinedStr(
                    values=[
                      Constant(value='\n'),
                      FormattedValue(
                        value=Name(id='extend_system_message', ctx=Load()),
                        conversion=-1)]))],
              orelse=[]),
            Assign(
              targets=[
                Attribute(
                  value=Name(id='self', ctx=Load()),
                  attr='system_message',
                  ctx=Store())],
              value=Call(
                func=Name(id='SystemMessage', ctx=Load()),
                args=[],
                keywords=[
                  keyword(
                    arg='content',
                    value=Name(id='prompt', ctx=Load()))]))],
          decorator_list=[]),
        FunctionDef(
          name='_load_prompt_template',
          args=arguments(
            posonlyargs=[],
            args=[
              arg(arg='self')],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]),
          body=[
            Expr(
              value=Constant(value='Load the prompt template from the markdown file.')),
            Try(
              body=[
                With(
                  items=[
                    withitem(
                      context_expr=Call(
                        func=Attribute(
                          value=Call(
                            func=Attribute(
                              value=Call(
                                func=Attribute(
                                  value=Attribute(
                                    value=Name(id='importlib', ctx=Load()),
                                    attr='resources',
                                    ctx=Load()),
                                  attr='files',
                                  ctx=Load()),
                                args=[
                                  Constant(value='browser_use.agent')],
                                keywords=[]),
                              attr='joinpath',
                              ctx=Load()),
                            args=[
                              Constant(value='system_prompt.md')],
                            keywords=[]),
                          attr='open',
                          ctx=Load()),
                        args=[
                          Constant(value='r')],
                        keywords=[]),
                      optional_vars=Name(id='f', ctx=Store()))],
                  body=[
                    Assign(
                      targets=[
                        Attribute(
                          value=Name(id='self', ctx=Load()),
                          attr='prompt_template',
                          ctx=Store())],
                      value=Call(
                        func=Attribute(
                          value=Name(id='f', ctx=Load()),
                          attr='read',
                          ctx=Load()),
                        args=[],
                        keywords=[]))])],
              handlers=[
                ExceptHandler(
                  type=Name(id='Exception', ctx=Load()),
                  name='e',
                  body=[
                    Raise(
                      exc=Call(
                        func=Name(id='RuntimeError', ctx=Load()),
                        args=[
                          JoinedStr(
                            values=[
                              Constant(value='Failed to load system prompt template: '),
                              FormattedValue(
                                value=Name(id='e', ctx=Load()),
                                conversion=-1)])],
                        keywords=[]))])],
              orelse=[],
              finalbody=[])],
          decorator_list=[],
          returns=Constant(value=None)),
        FunctionDef(
          name='get_system_message',
          args=arguments(
            posonlyargs=[],
            args=[
              arg(arg='self')],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]),
          body=[
            Expr(
              value=Constant(value='\n\t\tGet the system prompt for the agent.\n\n\t\tReturns:\n\t\t    SystemMessage: Formatted system prompt\n\t\t')),
            Return(
              value=Attribute(
                value=Name(id='self', ctx=Load()),
                attr='system_message',
                ctx=Load()))],
          decorator_list=[],
          returns=Name(id='SystemMessage', ctx=Load()))],
      decorator_list=[]),
    ClassDef(
      name='AgentMessagePrompt',
      bases=[],
      keywords=[],
      body=[
        FunctionDef(
          name='__init__',
          args=arguments(
            posonlyargs=[],
            args=[
              arg(arg='self'),
              arg(
                arg='state',
                annotation=Constant(value='BrowserState')),
              arg(
                arg='result',
                annotation=Subscript(
                  value=Name(id='Optional', ctx=Load()),
                  slice=Subscript(
                    value=Name(id='List', ctx=Load()),
                    slice=Constant(value='ActionResult'),
                    ctx=Load()),
                  ctx=Load())),
              arg(
                arg='include_attributes',
                annotation=Subscript(
                  value=Name(id='list', ctx=Load()),
                  slice=Name(id='str', ctx=Load()),
                  ctx=Load())),
              arg(
                arg='step_info',
                annotation=Subscript(
                  value=Name(id='Optional', ctx=Load()),
                  slice=Constant(value='AgentStepInfo'),
                  ctx=Load()))],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[
              Constant(value=None),
              List(elts=[], ctx=Load()),
              Constant(value=None)]),
          body=[
            Assign(
              targets=[
                Attribute(
                  value=Name(id='self', ctx=Load()),
                  attr='state',
                  ctx=Store())],
              value=Name(id='state', ctx=Load())),
            Assign(
              targets=[
                Attribute(
                  value=Name(id='self', ctx=Load()),
                  attr='result',
                  ctx=Store())],
              value=Name(id='result', ctx=Load())),
            Assign(
              targets=[
                Attribute(
                  value=Name(id='self', ctx=Load()),
                  attr='include_attributes',
                  ctx=Store())],
              value=Name(id='include_attributes', ctx=Load())),
            Assign(
              targets=[
                Attribute(
                  value=Name(id='self', ctx=Load()),
                  attr='step_info',
                  ctx=Store())],
              value=Name(id='step_info', ctx=Load()))],
          decorator_list=[]),
        FunctionDef(
          name='get_user_message',
          args=arguments(
            posonlyargs=[],
            args=[
              arg(arg='self'),
              arg(
                arg='use_vision',
                annotation=Name(id='bool', ctx=Load()))],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[
              Constant(value=True)]),
          body=[
            Assign(
              targets=[
                Name(id='elements_text', ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Attribute(
                    value=Attribute(
                      value=Name(id='self', ctx=Load()),
                      attr='state',
                      ctx=Load()),
                    attr='element_tree',
                    ctx=Load()),
                  attr='clickable_elements_to_string',
                  ctx=Load()),
                args=[],
                keywords=[
                  keyword(
                    arg='include_attributes',
                    value=Attribute(
                      value=Name(id='self', ctx=Load()),
                      attr='include_attributes',
                      ctx=Load()))])),
            Assign(
              targets=[
                Name(id='has_content_above', ctx=Store())],
              value=Compare(
                left=BoolOp(
                  op=Or(),
                  values=[
                    Attribute(
                      value=Attribute(
                        value=Name(id='self', ctx=Load()),
                        attr='state',
                        ctx=Load()),
                      attr='pixels_above',
                      ctx=Load()),
                    Constant(value=0)]),
                ops=[
                  Gt()],
                comparators=[
                  Constant(value=0)])),
            Assign(
              targets=[
                Name(id='has_content_below', ctx=Store())],
              value=Compare(
                left=BoolOp(
                  op=Or(),
                  values=[
                    Attribute(
                      value=Attribute(
                        value=Name(id='self', ctx=Load()),
                        attr='state',
                        ctx=Load()),
                      attr='pixels_below',
                      ctx=Load()),
                    Constant(value=0)]),
                ops=[
                  Gt()],
                comparators=[
                  Constant(value=0)])),
            If(
              test=Compare(
                left=Name(id='elements_text', ctx=Load()),
                ops=[
                  NotEq()],
                comparators=[
                  Constant(value='')]),
              body=[
                If(
                  test=Name(id='has_content_above', ctx=Load()),
                  body=[
                    Assign(
                      targets=[
                        Name(id='elements_text', ctx=Store())],
                      value=JoinedStr(
                        values=[
                          Constant(value='... '),
                          FormattedValue(
                            value=Attribute(
                              value=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='state',
                                ctx=Load()),
                              attr='pixels_above',
                              ctx=Load()),
                            conversion=-1),
                          Constant(value=' pixels above - scroll or extract content to see more ...\n'),
                          FormattedValue(
                            value=Name(id='elements_text', ctx=Load()),
                            conversion=-1)]))],
                  orelse=[
                    Assign(
                      targets=[
                        Name(id='elements_text', ctx=Store())],
                      value=JoinedStr(
                        values=[
                          Constant(value='[Start of page]\n'),
                          FormattedValue(
                            value=Name(id='elements_text', ctx=Load()),
                            conversion=-1)]))]),
                If(
                  test=Name(id='has_content_below', ctx=Load()),
                  body=[
                    Assign(
                      targets=[
                        Name(id='elements_text', ctx=Store())],
                      value=JoinedStr(
                        values=[
                          FormattedValue(
                            value=Name(id='elements_text', ctx=Load()),
                            conversion=-1),
                          Constant(value='\n... '),
                          FormattedValue(
                            value=Attribute(
                              value=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='state',
                                ctx=Load()),
                              attr='pixels_below',
                              ctx=Load()),
                            conversion=-1),
                          Constant(value=' pixels below - scroll or extract content to see more ...')]))],
                  orelse=[
                    Assign(
                      targets=[
                        Name(id='elements_text', ctx=Store())],
                      value=JoinedStr(
                        values=[
                          FormattedValue(
                            value=Name(id='elements_text', ctx=Load()),
                            conversion=-1),
                          Constant(value='\n[End of page]')]))])],
              orelse=[
                Assign(
                  targets=[
                    Name(id='elements_text', ctx=Store())],
                  value=Constant(value='empty page'))]),
            If(
              test=Attribute(
                value=Name(id='self', ctx=Load()),
                attr='step_info',
                ctx=Load()),
              body=[
                Assign(
                  targets=[
                    Name(id='step_info_description', ctx=Store())],
                  value=JoinedStr(
                    values=[
                      Constant(value='Current step: '),
                      FormattedValue(
                        value=BinOp(
                          left=Attribute(
                            value=Attribute(
                              value=Name(id='self', ctx=Load()),
                              attr='step_info',
                              ctx=Load()),
                            attr='step_number',
                            ctx=Load()),
                          op=Add(),
                          right=Constant(value=1)),
                        conversion=-1),
                      Constant(value='/'),
                      FormattedValue(
                        value=Attribute(
                          value=Attribute(
                            value=Name(id='self', ctx=Load()),
                            attr='step_info',
                            ctx=Load()),
                          attr='max_steps',
                          ctx=Load()),
                        conversion=-1)]))],
              orelse=[
                Assign(
                  targets=[
                    Name(id='step_info_description', ctx=Store())],
                  value=Constant(value=''))]),
            Assign(
              targets=[
                Name(id='time_str', ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Call(
                    func=Attribute(
                      value=Name(id='datetime', ctx=Load()),
                      attr='now',
                      ctx=Load()),
                    args=[],
                    keywords=[]),
                  attr='strftime',
                  ctx=Load()),
                args=[
                  Constant(value='%Y-%m-%d %H:%M')],
                keywords=[])),
            AugAssign(
              target=Name(id='step_info_description', ctx=Store()),
              op=Add(),
              value=JoinedStr(
                values=[
                  Constant(value='Current date and time: '),
                  FormattedValue(
                    value=Name(id='time_str', ctx=Load()),
                    conversion=-1)])),
            Assign(
              targets=[
                Name(id='state_description', ctx=Store())],
              value=JoinedStr(
                values=[
                  Constant(value='\n[Task history memory ends]\n[Current state starts here]\nThe following is one-time information - if you need to remember it write it to memory:\nCurrent url: '),
                  FormattedValue(
                    value=Attribute(
                      value=Attribute(
                        value=Name(id='self', ctx=Load()),
                        attr='state',
                        ctx=Load()),
                      attr='url',
                      ctx=Load()),
                    conversion=-1),
                  Constant(value='\nAvailable tabs:\n'),
                  FormattedValue(
                    value=Attribute(
                      value=Attribute(
                        value=Name(id='self', ctx=Load()),
                        attr='state',
                        ctx=Load()),
                      attr='tabs',
                      ctx=Load()),
                    conversion=-1),
                  Constant(value='\nInteractive elements from top layer of the current page inside the viewport:\n'),
                  FormattedValue(
                    value=Name(id='elements_text', ctx=Load()),
                    conversion=-1),
                  Constant(value='\n'),
                  FormattedValue(
                    value=Name(id='step_info_description', ctx=Load()),
                    conversion=-1),
                  Constant(value='\n')])),
            If(
              test=Attribute(
                value=Name(id='self', ctx=Load()),
                attr='result',
                ctx=Load()),
              body=[
                For(
                  target=Tuple(
                    elts=[
                      Name(id='i', ctx=Store()),
                      Name(id='result', ctx=Store())],
                    ctx=Store()),
                  iter=Call(
                    func=Name(id='enumerate', ctx=Load()),
                    args=[
                      Attribute(
                        value=Name(id='self', ctx=Load()),
                        attr='result',
                        ctx=Load())],
                    keywords=[]),
                  body=[
                    If(
                      test=Attribute(
                        value=Name(id='result', ctx=Load()),
                        attr='extracted_content',
                        ctx=Load()),
                      body=[
                        AugAssign(
                          target=Name(id='state_description', ctx=Store()),
                          op=Add(),
                          value=JoinedStr(
                            values=[
                              Constant(value='\nAction result '),
                              FormattedValue(
                                value=BinOp(
                                  left=Name(id='i', ctx=Load()),
                                  op=Add(),
                                  right=Constant(value=1)),
                                conversion=-1),
                              Constant(value='/'),
                              FormattedValue(
                                value=Call(
                                  func=Name(id='len', ctx=Load()),
                                  args=[
                                    Attribute(
                                      value=Name(id='self', ctx=Load()),
                                      attr='result',
                                      ctx=Load())],
                                  keywords=[]),
                                conversion=-1),
                              Constant(value=': '),
                              FormattedValue(
                                value=Attribute(
                                  value=Name(id='result', ctx=Load()),
                                  attr='extracted_content',
                                  ctx=Load()),
                                conversion=-1)]))],
                      orelse=[]),
                    If(
                      test=Attribute(
                        value=Name(id='result', ctx=Load()),
                        attr='error',
                        ctx=Load()),
                      body=[
                        Assign(
                          targets=[
                            Name(id='error', ctx=Store())],
                          value=Subscript(
                            value=Call(
                              func=Attribute(
                                value=Attribute(
                                  value=Name(id='result', ctx=Load()),
                                  attr='error',
                                  ctx=Load()),
                                attr='split',
                                ctx=Load()),
                              args=[
                                Constant(value='\n')],
                              keywords=[]),
                            slice=UnaryOp(
                              op=USub(),
                              operand=Constant(value=1)),
                            ctx=Load())),
                        AugAssign(
                          target=Name(id='state_description', ctx=Store()),
                          op=Add(),
                          value=JoinedStr(
                            values=[
                              Constant(value='\nAction error '),
                              FormattedValue(
                                value=BinOp(
                                  left=Name(id='i', ctx=Load()),
                                  op=Add(),
                                  right=Constant(value=1)),
                                conversion=-1),
                              Constant(value='/'),
                              FormattedValue(
                                value=Call(
                                  func=Name(id='len', ctx=Load()),
                                  args=[
                                    Attribute(
                                      value=Name(id='self', ctx=Load()),
                                      attr='result',
                                      ctx=Load())],
                                  keywords=[]),
                                conversion=-1),
                              Constant(value=': ...'),
                              FormattedValue(
                                value=Name(id='error', ctx=Load()),
                                conversion=-1)]))],
                      orelse=[])],
                  orelse=[])],
              orelse=[]),
            If(
              test=BoolOp(
                op=And(),
                values=[
                  Attribute(
                    value=Attribute(
                      value=Name(id='self', ctx=Load()),
                      attr='state',
                      ctx=Load()),
                    attr='screenshot',
                    ctx=Load()),
                  Compare(
                    left=Name(id='use_vision', ctx=Load()),
                    ops=[
                      Eq()],
                    comparators=[
                      Constant(value=True)])]),
              body=[
                Return(
                  value=Call(
                    func=Name(id='HumanMessage', ctx=Load()),
                    args=[],
                    keywords=[
                      keyword(
                        arg='content',
                        value=List(
                          elts=[
                            Dict(
                              keys=[
                                Constant(value='type'),
                                Constant(value='text')],
                              values=[
                                Constant(value='text'),
                                Name(id='state_description', ctx=Load())]),
                            Dict(
                              keys=[
                                Constant(value='type'),
                                Constant(value='image_url')],
                              values=[
                                Constant(value='image_url'),
                                Dict(
                                  keys=[
                                    Constant(value='url')],
                                  values=[
                                    JoinedStr(
                                      values=[
                                        Constant(value='data:image/png;base64,'),
                                        FormattedValue(
                                          value=Attribute(
                                            value=Attribute(
                                              value=Name(id='self', ctx=Load()),
                                              attr='state',
                                              ctx=Load()),
                                            attr='screenshot',
                                            ctx=Load()),
                                          conversion=-1)])])])],
                          ctx=Load()))]))],
              orelse=[]),
            Return(
              value=Call(
                func=Name(id='HumanMessage', ctx=Load()),
                args=[],
                keywords=[
                  keyword(
                    arg='content',
                    value=Name(id='state_description', ctx=Load()))]))],
          decorator_list=[],
          returns=Name(id='HumanMessage', ctx=Load()))],
      decorator_list=[]),
    ClassDef(
      name='PlannerPrompt',
      bases=[
        Name(id='SystemPrompt', ctx=Load())],
      keywords=[],
      body=[
        FunctionDef(
          name='get_system_message',
          args=arguments(
            posonlyargs=[],
            args=[
              arg(arg='self')],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]),
          body=[
            Return(
              value=Call(
                func=Name(id='SystemMessage', ctx=Load()),
                args=[],
                keywords=[
                  keyword(
                    arg='content',
                    value=Constant(value='You are a planning agent that helps break down tasks into smaller steps and reason about the current state.\nYour role is to:\n1. Analyze the current state and history\n2. Evaluate progress towards the ultimate goal\n3. Identify potential challenges or roadblocks\n4. Suggest the next high-level steps to take\n\nInside your messages, there will be AI messages from different agents with different formats.\n\nYour output format should be always a JSON object with the following fields:\n{\n    "state_analysis": "Brief analysis of the current state and what has been done so far",\n    "progress_evaluation": "Evaluation of progress towards the ultimate goal (as percentage and description)",\n    "challenges": "List any potential challenges or roadblocks",\n    "next_steps": "List 2-3 concrete next steps to take",\n    "reasoning": "Explain your reasoning for the suggested next steps"\n}\n\nIgnore the other AI messages output structures.\n\nKeep your responses concise and focused on actionable insights.'))]))],
          decorator_list=[],
          returns=Name(id='SystemMessage', ctx=Load()))],
      decorator_list=[])],
  type_ignores=[])
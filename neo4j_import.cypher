CREATE (:File {id: "eslint_config_mjs", name: "eslint.config.mjs", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\eslint.config.mjs", type: "utility", description: "This file configures ESLint for a Next.js project, extending recommended configurations for core web vitals and TypeScript support. It leverages the `@eslint/eslintrc` package for compatibility with older ESLint configurations.\n\n2.  **Functions/Components:**\n\n    *   `compat`: (Instance of `FlatCompat`) - Used to convert older ESLint configurations to the new flat config format.\n        *   Parameters: `baseDirectory` (string) - The directory to resolve relative paths from.\n        *   Return Value: N/A (constructor).\n        *   Called: Once, when initialized.\n    *   `compat.extends`: (Function from `FlatCompat`) - Extends existing ESLint configurations.\n        *   Parameters: `...configs` (string[]) - One or more names of ESLint configurations to extend.\n        *   Return Value: An array of ESLint configuration objects.\n        *   Called: Once, within `eslintConfig`.\n\n3.  **External dependencies and tools used:**\n\n    *   `path`: (Node.js built-in module) - Used for path manipulation (specifically `dirname`).\n    *   `url`: (Node.js built-in module) - Used for URL manipulation (specifically `fileURLToPath`).\n    *   `@eslint/eslintrc`: (npm package) - Provides compatibility with older ESLint configuration formats.\n    *   `next/core-web-vitals`: (ESLint configuration from Next.js) - Provides ESLint rules for core web vitals.\n    *   `next/typescript`: (ESLint configuration from Next.js) - Provides ESLint rules for TypeScript.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   ESLint (implicitly) - The generated configuration is intended to be used by ESLint."})
CREATE (:File {id: "next-env_d_ts", name: "next-env.d.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\next-env.d.ts", type: "utility", description: "This file provides TypeScript type definitions for Next.js projects, ensuring type safety and autocompletion within the development environment. It extends the global types provided by Next.js.\n\n2.  **Functions/Components:** None. This file primarily declares types and doesn't contain any executable code.\n\n3.  **External dependencies and tools used:**\n    *   `next`:  Provides core Next.js type definitions.\n    *   `next/image-types/global`: Provides type definitions related to Next.js image handling.\n    *   TypeScript compiler.\n\n4.  **Related functions, components, or APIs it interacts with:** This file interacts with the Next.js framework and its APIs by providing type definitions that are used throughout the project. It doesn't directly call or interact with specific functions or components but rather defines the types they use."})
CREATE (:File {id: "next_config_ts", name: "next.config.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\next.config.ts", type: "types", description: "This file configures a Next.js application. It sets options like React Strict Mode and ESLint behavior during builds.\n\n2.  **Functions/Components:**\n    *   `nextConfig`: (Type: `NextConfig`) -  An object defining the Next.js configuration. It's exported as the default.\n        *   Parameters: None (it's a configuration object).\n        *   Return Value:  A `NextConfig` object.\n        *   Called: By the Next.js build process.\n\n3.  **External dependencies and tools used:**\n    *   `next`:  Used for the `NextConfig` type.\n\n4.  **Related functions, components, or APIs it interacts with:**\n    *   Next.js build process:  The configuration affects how Next.js builds and runs the application."})
CREATE (:File {id: "package_json", name: "package.json", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\package.json", type: "styles", description: "This file defines the metadata and dependencies for a Next.js project named \"iitdforum\". It specifies scripts for development, building, starting, and linting the application, along with the required libraries.\n\n2.  **Functions/Components:**\n    *   **Scripts:**\n        *   `dev`: Runs `next dev` (Starts the Next.js development server).\n        *   `build`: Runs `next build || true` (Builds the Next.js application; the `|| true` allows the build to continue even if errors occur).\n        *   `start`: Runs `next start` (Starts the Next.js production server).\n        *   `lint`: Runs `next lint` (Runs the ESLint code linter).\n    *   **ESLint Configuration:**\n        *   `rules`:\n            *   `no-var`: 0 (Disables the `no-var` rule in ESLint)\n\n3.  **External dependencies and tools used:**\n    *   `@google/generative-ai`: Google's Generative AI library.\n    *   `@types/jsonwebtoken`, `@types/bcrypt`, `@types/mongoose`, `@types/node`, `@types/react`, `@types/react-dom`: TypeScript type definitions for various libraries.\n    *   `@vercel/analytics`, `@vercel/speed-insights`: Vercel analytics and speed insights tools.\n    *   `axios`: HTTP client for making API requests.\n    *   `bcrypt`: Library for password hashing.\n    *   `cloudinary`: Cloudinary library for image and video management.\n    *   `cookie-parser`: Middleware for parsing cookies.\n    *   `cookies-next`: Library for managing cookies in Next.js.\n    *   `daisyui`: A component library for Tailwind CSS.\n    *   `dotenv`: Library for loading environment variables.\n    *   `jsonwebtoken`: Library for working with JSON Web Tokens (JWT).\n    *   `lucide-react`: React icons library.\n    *   `mongodb`: MongoDB database driver.\n    *   `mongoose`: Object-Document Mapper (ODM) for MongoDB.\n    *   `multiparty`: Library for parsing multipart form data.\n    *   `next`: Next.js framework.\n    *   `react`, `react-dom`: React libraries for building user interfaces.\n    *   `tsx`: TypeScript execution tool.\n    *   `zod`: Schema validation library.\n    *   `autoprefixer`, `postcss`, `tailwindcss`: Tools for styling the application.\n    *   `eslint`, `eslint-config-next`: ESLint and configuration for linting the code.\n    *   `typescript`: TypeScript compiler.\n\n4.  **Related functions, components, or APIs it interacts with:**\n    *   The `scripts` section interacts with the Next.js framework and its commands (`next dev`, `next build`, `next start`, `next lint`).\n    *   The dependencies suggest interaction with various APIs and services, including:\n        *   Google's Generative AI (likely for AI-related features).\n        *   Database (MongoDB, Mongoose).\n        *   Authentication and authorization (bcrypt, jsonwebtoken).\n        *   Cloud storage (Cloudinary).\n        *   API calls (axios).\n        *   User interface components (React, daisyui, lucide-react).\n        *   Analytics and performance monitoring (Vercel tools)."})
CREATE (:File {id: "postcss_config_js", name: "postcss.config.js", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\postcss.config.js", type: "styles", description: "This file configures PostCSS, a tool for transforming CSS, to use Tailwind CSS for utility-first styling and Autoprefixer for vendor prefixing.\n\n2.  **Functions/Components:**\n    *   `module.exports`:  Exports an object containing the PostCSS configuration.\n        *   Parameters: None\n        *   Return Value: An object containing the `plugins` configuration.\n        *   Called:  By the PostCSS build process.\n\n3.  **External dependencies and tools used:**\n    *   `tailwindcss`: A utility-first CSS framework.\n    *   `autoprefixer`: A PostCSS plugin that automatically adds vendor prefixes to CSS rules.\n    *   PostCSS: A tool for transforming CSS.\n\n4.  **Related functions, components, or APIs it interacts with:**\n    *   Tailwind CSS configuration (likely in a separate `tailwind.config.js` file).\n    *   CSS files that will be processed by PostCSS."})
CREATE (:File {id: "postcss_config_mjs", name: "postcss.config.mjs", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\postcss.config.mjs", type: "styles", description: "This file configures PostCSS to process CSS files, specifically enabling the use of Tailwind CSS.\n2.  **Functions/Components:**\n    *   `config`: (Object) - Defines the PostCSS configuration.\n        *   `plugins`: (Object) - Contains the plugins to use.\n            *   `tailwindcss`: (Object) - Tailwind CSS plugin configuration.\n        *   Returns: The PostCSS configuration object.\n        *   Called: By PostCSS during the build process.\n3.  **External dependencies and tools used:**\n    *   `postcss-load-config`: (Type import) Used for type hinting.\n    *   `tailwindcss`: The Tailwind CSS plugin.\n4.  **Related functions, components, or APIs it interacts with:**\n    *   PostCSS: The core CSS processing tool."})
CREATE (:File {id: "page_tsx", name: "page.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\advice\\page.tsx", type: "page", description: "This code defines a React component that fetches and displays a list of advice posts from an API. It also includes a navigation bar, a guide button, and a component to display individual posts.\n\n2.  **Functions/Components:**\n\n    *   `getallposts`:\n        *   Parameters: None\n        *   Return Value: `Promise<any>` (data from the API)\n        *   Called within `useEffect` in the `Advice` component.\n    *   `Advice`:\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called by the Next.js routing system.\n    *   `onhandleGuideClick`:\n        *   Parameters: None\n        *   Return Value: None\n        *   Called when the GuideButton is clicked.\n\n3.  **External dependencies and tools used:**\n\n    *   `axios`: For making HTTP requests to the API.\n    *   `react`: Core library for building the UI.\n    *   `next/navigation`: For routing within the Next.js application.\n    *   `react`: For managing component state and side effects.\n    *   `../components/CompRand`: Custom component.\n    *   `../components/GuideBut`: Custom component.\n    *   `../components/Navbar`: Custom component.\n    *   `next/link`: For creating links within the application.\n    *   `../components/Card3`: Custom component.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/allgeneralposts` (API endpoint): Used to fetch the advice posts.\n    *   `CompRand`, `GuideButton`, `Navbar`, `Card3`: Custom React components used for UI elements.\n    *   `router.push('/guide')`: Navigates to the '/guide' route.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `GuideButton`: Custom component, likely a button.\n    *   `Card3`: Custom component, likely a card to display post details.\n    *   `Navbar`: Custom component, likely a navigation bar.\n    *   `Link`: Next.js component for creating links.\n    *   Basic HTML elements (div, p, etc.) with Tailwind CSS classes for layout and styling.\n\n6.  **What props or state does it manage?**\n\n    *   `posts`: State variable of type `PostType[]` to store the fetched posts.\n    *   `loading`: State variable of type `boolean` to indicate whether the posts are being loaded.\n    *   `homeRenderer`: State variable of type `boolean`\n    *   `image`: State variable of type `File | null`\n    *   `title`: State variable of type `string`\n    *   `content`: State variable of type `string`\n    *   `params` prop passed to `GuideButton` This code fetches and displays course ratings from an API, allowing users to view course information. It also includes a search functionality (commented out) and a guide button.\n\n2.  **Functions/Components:**\n\n    *   `getAllRatings`:\n        *   Parameters: None\n        *   Return Value: `Promise<any>` (assumed to be an array of rating objects)\n        *   Called by: `useEffect` within the `AllCourses` component.\n    *   `AllCourses`:\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called by: Next.js routing system (as it's a page component).\n    *   `onHandleGuideClick`:\n        *   Parameters: None\n        *   Return Value: None\n        *   Called by: `GuideButton` component's `onClick` prop.\n\n3.  **External dependencies and tools used:**\n\n    *   `axios`: For making HTTP requests to the API.\n    *   `react`: Core React library for building the UI.\n    *   `next/navigation`: For routing within the Next.js application.\n    *   `react`: For managing component state and lifecycle.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/allcourseRatings`: API endpoint to fetch all course ratings (used by `getAllRatings`).\n    *   `/api/searchratings`: API endpoint for searching ratings (commented out).\n    *   `CardCourse`: A custom component to display individual course rating details.\n    *   `CompRand`: A custom component.\n    *   `GuideButton`: A custom component.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `div`: Used for layout and structure.\n    *   `p`: Used for displaying text (loading message, no results message).\n    *   `SearchBarArr2`: (Commented out) A custom search bar component.\n    *   `CardCourse`: A custom component to display course information.\n    *   `GuideButton`: A custom button component.\n\n6.  **What props or state does it manage?**\n\n    *   `searchText`: (Commented out) State for the search input text (string).\n    *   `rateData`: State for storing the fetched course ratings (array of `RateDataType` objects).\n    *   `loading`: State to indicate whether the data is being fetched (boolean).\n    *   `params`: Props passed to the `GuideButton` component. This code defines a React component, `Bot`, that serves as a chatbot interface for interacting with a course review system. It allows users to input search queries, displays responses from an AI, and presents course information and reviews in a card format.\n\n2.  **Functions/Components:**\n\n    *   `Bot()`:\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called: Directly rendered as a page component.\n    *   `animateMessage(fullMessage: string | undefined, index: number)`:\n        *   Parameters: `fullMessage` (string | undefined), `index` (number)\n        *   Return Value: None\n        *   Called: Inside `useEffect` when a new AI message is added to `chatMessages`.\n    *   `onhandleGuideClick()`:\n        *   Parameters: None\n        *   Return Value: None\n        *   Called: When the \"Guide\" button is clicked.\n    *   `preprocessRateCards(rateCards: RateDataType[] | RateDataType[][])`:\n        *   Parameters: `rateCards` (RateDataType[] | RateDataType[][])\n        *   Return Value: RateDataType[]\n        *   Called: Inside `handlesearchClick` to flatten the rate cards.\n    *   `handlesearchClick()`:\n        *   Parameters: None\n        *   Return Value: Promise<{ data: RateDataType[]; posts: PostType[]; } | undefined>\n        *   Called: When the search button is clicked in the `TextBox` component.\n    *   `chunkArray<T,>(array: T[], size: number)`:\n        *   Parameters: `array` (T[]), `size` (number)\n        *   Return Value: T[][]\n        *   Called: To split the rate cards and posts into chunks for pagination.\n\n3.  **External dependencies and tools used:**\n\n    *   `'client'`:  Indicates this is a client-side component in a Next.js application.\n    *   `../components/Navbar`: Imports a Navbar component.\n    *   `../components/textBoxAI`: Imports a TextBox component.\n    *   `react`: Used for React functionality (useState, useRef, useEffect).\n    *   `axios`: Used for making HTTP requests to the `/api/agent` endpoint.\n    *   `next/navigation`: Used for programmatic navigation (router).\n    *   `../components/CompRand`: Imports a CompRand component (likely for random content).\n    *   `next/link`: Used for creating links.\n    *   `../components/Card2`: Imports a Card2 component.\n    *   `../components/Card_course`: Imports a CardCourse component.\n    *   `../components/GuideBut`: Imports a GuideButton component.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `Navbar`: Displays a navigation bar.\n    *   `TextBox`:  Handles user input for search queries.\n    *   `/api/agent`:  An API endpoint that receives search queries and returns data (course information, reviews).\n    *   `CompRand`: Displays random content.\n    *   `Card2`: Displays review cards.\n    *   `CardCourse`: Displays course information cards.\n    *   `GuideButton`: Displays a button to navigate to a guide page.\n    *   `router.push('/guide')`: Navigates to the guide page.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `Navbar` (custom component)\n    *   `TextBox` (custom component)\n    *   `GuideButton` (custom component)\n    *   `Card2` (custom component)\n    *   `CardCourse` (custom component)\n    *   `chat` (DaisyUI class)\n    *   `chat-end` (DaisyUI class)\n    *   `chat-start` (DaisyUI class)\n    *   `chat-bubble` (DaisyUI class)\n    *   `btn` (DaisyUI class)\n    *   `join` (DaisyUI class)\n    *   `join-item` (DaisyUI class)\n    *   `loading` (DaisyUI class)\n    *   `loading-dots` (DaisyUI class)\n\n6.  **What props or state does it manage?**\n\n    *   `searchText`: (string) Stores the current search query entered by the user.\n    *   `rateData`: (RateDataType[]) Stores the course data returned from the API.\n    *   `posts`: (PostType[]) Stores the review data returned from the API.\n    *   `loading`: (boolean) Indicates whether data is being loaded.\n    *   `homeRenderer`: (boolean) Used to re-render the home page.\n    *   `searchEnabled`: (boolean) Controls whether the search button is enabled.\n    *   `displayedMessages`: ({ [key: number]: string }) Stores the partially displayed messages for the AI chat bubbles, used for the typing animation.\n    *   `chatMessages`: (ChatMessage[]) Stores the history of chat messages (user input and AI responses).\n    *   `isTyping`: (boolean) Indicates whether the AI is currently typing a response.\n    *   `isClicked`: (React.RefObject<boolean>) A ref to track if a button is clicked.\n    *   `chatContainerRef`: (React.RefObject<HTMLDivElement>) A ref to the chat container element, used for scrolling. This code defines a React component that displays a \"ChitChat\" forum, fetches and displays posts, and allows users to create new posts with titles, content, and optional images.\n\n2.  **Functions/Components:**\n\n    *   `ChitChat()`:\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called: Directly rendered as a page.\n        *   `fetchPosts()`:\n            *   Parameters: None\n            *   Return Value: None (void)\n            *   Called: Inside `useEffect` hook. Fetches posts from the server.\n        *   `handleFileChange(e: React.ChangeEvent<HTMLInputElement>)`:\n            *   Parameters: `e: React.ChangeEvent<HTMLInputElement>` (event object)\n            *   Return Value: None (void)\n            *   Called: When the user selects a file in the file input.\n        *   `handlePostSubmit()`:\n            *   Parameters: None\n            *   Return Value: None (void)\n            *   Called: When the user clicks the \"Post\" button. Submits a new post to the server.\n\n3.  **External dependencies and tools used:**\n\n    *   `axios`: For making HTTP requests to the server.\n    *   `react`: Core React library for building UI.\n    *   `useEffect`, `useState`: React hooks for managing side effects and component state.\n    *   `next/navigation`: For navigation using the `useRouter` hook.\n    *   `../components/Navbar`: Custom Navbar component (not defined in this file).\n    *   `../components/GuideBut`: Custom GuideButton component (not defined in this file).\n    *   `../components/Card3`: Custom Card3 component (not defined in this file).\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/allgeneralposts` (API endpoint): Used for fetching and posting data to the server.\n    *   `Navbar` component: Used for navigation.\n    *   `GuideButton` component: Used for navigation.\n    *   `Card3` component: Used to display individual posts.\n    *   `router.push('/guide')`: Navigates to the guide page.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `input` (type=\"text\", type=\"file\"): For user input (title, content, image).\n    *   `textarea`: For multi-line text input (content).\n    *   `button`: For submitting posts.\n    *   `div`: For layout and container elements.\n    *   `p`: For displaying text (loading message, no posts message).\n    *   `fixed`, `flex`, `justify-between`, `items-center`, `p-4`, `bg-[#1e1e1e]`, `text-white`, `z-20`, `w-1/4`, `w-1/2`, `text-center`, `text-2xl`, `text-4xl`, `flex-1`, `lg:ml-64`, `top-0`, `left-0`, `lg:left-64`, `right-0`, `mt-20`, `px-4`, `rounded-lg`, `bg-gray-800`, `bg-gray-700`, `mb-2`, `bg-blue-500`, `px-4`, `py-2`, `rounded`, `text-white`, `text-center` are Tailwind CSS classes for styling and layout.\n    *   `Card3` component: Displays individual posts.\n    *   `GuideButton` component: Displays a button.\n\n6.  **What props or state does it manage?**\n\n    *   `posts`: State variable holding an array of post objects (`PostType[]`).\n    *   `loading`: State variable (boolean) indicating whether posts are being loaded.\n    *   `homeRenderer`: State variable (boolean) used to trigger re-fetching of posts.\n    *   `image`: State variable holding the selected image file (`File | null`).\n    *   `title`: State variable holding the post title (`string`).\n    *   `content`: State variable holding the post content (`string`). This code defines a React component for creating a new general post, including features like title, content, post type selection, tag management, and image upload. It handles user authentication, input validation, and submission of the post to a backend API.\n\n2.  **Functions/Components:**\n\n    *   `GeneralPost`:\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called: By the Next.js routing system.\n        *   Calls: `useRouter`, `useState`, `useEffect`, `axios`, `handleTagInput`, `addTag`, `removeTag`, `handleInputFocus`, `handleImageChange`, `handleonPostClick`\n    *   `handleTagInput`:\n        *   Parameters: `e: React.ChangeEvent<HTMLInputElement>`\n        *   Return Value: None\n        *   Called: On input change in the tag input field.\n    *   `addTag`:\n        *   Parameters: `tag: string`\n        *   Return Value: None\n        *   Called: When a tag suggestion is selected.\n    *   `removeTag`:\n        *   Parameters: `tagToRemove: string`\n        *   Return Value: None\n        *   Called: When the 'X' button is clicked on a tag.\n    *   `handleInputFocus`:\n        *   Parameters: None\n        *   Return Value: None\n        *   Called: When the tag input field gains focus.\n    *   `handleImageChange`:\n        *   Parameters: `e: React.ChangeEvent<HTMLInputElement>`\n        *   Return Value: None\n        *   Called: When an image is selected in the file input.\n    *   `handleonPostClick`:\n        *   Parameters: None\n        *   Return Value: None\n        *   Called: When the \"POST\" button is clicked.\n    *   `verifyUser`:\n        *   Parameters: None\n        *   Return Value: None\n        *   Called: Inside `useEffect` on component mount.\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: Core React library for building UI components.\n    *   `next/navigation`: For client-side routing using `useRouter`.\n    *   `next/image`: For optimized image handling.\n    *   `axios`: For making HTTP requests to the backend API.\n    *   `zod`: For data validation using schemas.\n    *   `lucide-react`: For the X icon.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/verificationForCreatePost`: API endpoint to verify user authentication.\n    *   `/api/allgeneralposts`: API endpoint to create a new general post.\n    *   `Navbar`: A component used for navigation (imported but not used).\n    *   `tagSuggestions`: An object containing tag suggestions based on post type.\n    *   `tagColors`: An array of colors for the tags.\n    *   `generalpostSchema`: Zod schema for validating the post data.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `Image` (from `next/image`): For displaying the close icon and potentially the uploaded image.\n    *   `input` (type=\"text\", type=\"file\"): For title, tag input, and image upload.\n    *   `textarea`: For content input.\n    *   `select`: For post type selection.\n    *   `button`: For the \"POST\" button and tag removal.\n    *   `div`: For layout and styling.\n    *   `span`: For displaying tags.\n    *   `dialog`: For modal dialogs (login check, alerts, creating post).\n\n6.  **What props or state does it manage?**\n\n    *   `yes`: State variable (string) - seems unused.\n    *   `title`: State variable (string) - stores the post title.\n    *   `postType`: State variable (string) - stores the selected post type.\n    *   `content`: State variable (string) - stores the post content.\n    *   `tags`: State variable (string[]) - stores the selected tags.\n    *   `tagInput`: State variable (string) - stores the current input in the tag input field.\n    *   `showSuggestions`: State variable (boolean) - controls the visibility of tag suggestions.\n    *   `image`: State variable (File | null) - stores the selected image file (unused).\n    *   `imageUrl`: State variable (string) - stores the URL of the uploaded image (unused).\n    *   `selectedImage`: State variable (File | null) - stores the selected image file. This code defines a React component for creating and submitting a course review post. It handles user authentication, input validation, and API calls to submit the post.\n\n2.  **Functions/Components:**\n\n    *   `ContentPost`:\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called: Directly rendered as a page.\n        *   `verifyUser`:\n            *   Parameters: None\n            *   Return Value: None (async function)\n            *   Called: Inside `useEffect` on component mount.\n        *   `handleonPostClick`:\n            *   Parameters: None\n            *   Return Value: None (async function)\n            *   Called: When the \"POST\" button is clicked.\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: For building the UI.\n    *   `next/navigation`:  `useRouter` hook for client-side navigation.\n    *   `next/image`: For displaying images.\n    *   `axios`: For making HTTP requests to the API.\n    *   `zod`: For data validation.\n    *   `../components/BlueBut2`: Custom component for a blue button.\n    *   `../components/SearchBarArr2`: Custom component for a search bar.\n    *   `../components/Navbar`: Custom component for a navigation bar.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/verificationForCreatePost`: API endpoint to verify user authentication.\n    *   `/api/allposts`: API endpoint to submit the course review post.\n    *   `router.push()`: Navigates to different routes (`/home`, `/loginSignup`, `/rateCourse`).\n    *   `postSchema`: Zod schema for validating the post data.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `Image`: Displays an image (likely a close icon).\n    *   `SearchBarArr2`: Custom search bar component.\n    *   `BlueBut2`: Custom button component.\n    *   `textarea`: For the content input.\n    *   `dialog`: HTML dialog elements used for modal popups.\n\n6.  **What props or state does it manage?**\n\n    *   `yes`: State variable (string) to manage the selection of \"Yes\" or \"No\" for displaying public name (currently commented out).\n    *   `course`: State variable (string) for the course input.\n    *   `prof`: State variable (string) for the professor input.\n    *   `content`: State variable (string) for the content input. This code defines a React component that displays a guide or information card, likely within a larger application. It fetches data for the guide and renders it using other components.\n\n2.  **Functions/Components:**\n\n    *   `Guide()`:\n        *   Parameters: None\n        *   Return Value: JSX (React element)\n        *   Called: By the Next.js routing system.\n        *   Uses: `router.push()`, renders `Card2` and `CompRand` components.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/navigation`: `useRouter` hook for client-side navigation.\n    *   `next/image`: `Image` component for optimized image loading.\n    *   `../components/CompRand`: Custom component.\n    *   `../components/Card2`: Custom component.\n    *   `../components/Navbar`: Custom component.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `router.push('/home')`: Navigates to the `/home` route.\n    *   `Card2`: Receives data from `guideObj` and renders a card.\n    *   `CompRand`: Renders a random component.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `Image`: Next.js Image component.\n    *   `div`: Standard HTML div elements for layout and styling.\n    *   No DaisyUI components are explicitly used.\n\n6.  **What props or state does it manage?**\n\n    *   `guideObj`: An object containing data for the guide card.\n    *   `router`:  Uses the `useRouter` hook to manage navigation state. This code defines the main page of a forum application. It fetches and displays posts, provides a search functionality, and renders course information based on search results or initial data.\n\n2.  **Functions/Components:**\n\n    *   `getallposts()`:\n        *   Parameters: None\n        *   Return Value: `Promise<any>` (likely an array of post objects)\n        *   Called: Inside `useEffect` hook.\n    *   `Home()` (Default export, a React component):\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called: By the Next.js framework.\n        *   `handlesearchClick()`:\n            *   Parameters: None\n            *   Return Value: `Promise<{ data: any, posts: any }>`\n            *   Called: When the search button in `SearchBarArr2` is clicked.\n        *   `onhandleGuideClick()`:\n            *   Parameters: None\n            *   Return Value: None\n            *   Called: When the \"Guide\" button is clicked.\n\n3.  **External dependencies and tools used:**\n\n    *   `axios`: For making HTTP requests (fetching posts and searching).\n    *   `react`: Core library for building the UI.\n    *   `next/navigation`: For routing (using `useRouter`).\n    *   `react`: For state management (`useState`) and side effects (`useEffect`).\n    *   `next/link`: For creating links.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/allposts` (API endpoint): Fetches all posts.\n    *   `/api/agent` (API endpoint): Handles search queries.\n    *   `../components/Card2`: Displays individual post content.\n    *   `../components/SearchBarArr2`: Provides a search bar.\n    *   `../components/Card_course`: Displays course information.\n    *   `../components/CompRand`: A component (purpose unknown).\n    *   `../components/GuideBut`: A button component.\n    *   `../components/Navbar`: Navigation bar component.\n    *   `../components/textBoxAI`: A text box component.\n    *   `/guide` (route): Navigates to the guide page.\n    *   `/createNewPost` (route): Navigates to the create new post page.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `Card2`: Displays individual posts.\n    *   `SearchBarArr2`: Search bar.\n    *   `CardCourse`: Displays course information.\n    *   `CompRand`: A component (purpose unknown).\n    *   `GuideButton`: A button.\n    *   `Navbar`: Navigation bar.\n    *   `TextBox`: A text box.\n    *   `Link`: Creates links to other pages.\n    *   Uses Tailwind CSS classes for styling (e.g., `flex`, `text-center`, `bg-[#1e1e1e]`).\n\n6.  **What props or state does it manage?**\n\n    *   `searchText`: (State) Stores the search text entered by the user.\n    *   `rateData`: (State) Stores the data for course ratings.\n    *   `posts`: (State) Stores the fetched posts.\n    *   `loading`: (State) Indicates whether data is being loaded.\n    *   `homeRenderer`: (State) Used to trigger re-renders. This code implements a login and signup page for a web application. It handles user input, makes API calls for authentication, and navigates the user to the home page upon successful authentication.\n\n2.  **Functions/Components:**\n\n    *   `AuthPage`:\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called: Directly rendered as a page component.\n    *   `handleonChange`:\n        *   Parameters: `event: React.ChangeEvent<HTMLInputElement>`, `value: string`\n        *   Return Value: `void`\n        *   Called: When the value of the input fields changes (username, password).\n    *   `handleAuth`:\n        *   Parameters: None\n        *   Return Value: `Promise<void>`\n        *   Called: When the \"Login\" or \"Sign Up\" button is clicked.\n    *   `handleBackToSite`:\n        *   Parameters: None\n        *   Return Value: `void`\n        *   Called: When the \"Back to site\" button is clicked.\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: For building the UI.\n    *   `next/navigation`: For client-side routing (`useRouter`).\n    *   `../components/Modal`: A custom modal component.\n    *   `useState`: React hook for managing component state.\n    *   `fetch`: For making API requests.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/auth/login` and `/api/auth/signup`: API endpoints for authentication.\n    *   `Modal` component: Displays error messages.\n    *   `/home`: The route to navigate to after successful authentication.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `div`: Used for layout and styling.\n    *   `button`: For login, signup, and back-to-site actions.\n    *   `input`: For username and password input.\n    *   `label`: For input field labels.\n    *   `Modal` (custom component): Displays error messages.\n    *   Uses Tailwind CSS classes for styling (e.g., `flex`, `py-8`, `rounded-lg`, `text-[#E7E9EA]`).\n\n6.  **What props or state does it manage?**\n\n    *   `isLogin`: Boolean state, determines whether the login or signup form is displayed.\n    *   `username`: String state, stores the username entered by the user.\n    *   `password`: String state, stores the password entered by the user.\n    *   `errorMessage`: String state, stores any error messages to be displayed. This code defines a landing page component that renders the `Home` component. It serves as a container for the main content of the landing page.\n\n2.  **Functions/Components:**\n\n    *   `LandingPage()`:\n        *   Parameters: None\n        *   Return Value: JSX (React element)\n        *   Called: By the application's routing system (likely Next.js).\n\n3.  **External dependencies and tools used:**\n\n    *   `./home/page`: Imports the `Home` component.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `Home`: The `LandingPage` component renders the `Home` component.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `<Home/>`: Renders the `Home` component, which likely contains the actual UI elements.\n    *   `<>`: React fragment.\n\n6.  **What props or state does it manage?**\n\n    *   It manages no props or state. This code defines a profile page that fetches user-specific data (posts) from an API, displays them as cards, and handles potential errors or empty data scenarios using modals.\n\n2.  **Functions/Components:**\n\n    *   `Card`:\n        *   Parameters: `title` (string), `username` (string), `content` (string)\n        *   Return Value: JSX (a `div` representing a card)\n        *   Called: Inside the `ProfilePage` component, within a `.map()` function.\n    *   `ProfilePage`:\n        *   Parameters: None\n        *   Return Value: JSX (a `div` structure representing the profile page)\n        *   Called: By the application's routing system (as it's the default export).\n    *   `handleNavigation`:\n        *   Parameters: `path` (string)\n        *   Return Value: None\n        *   Called: Not used in the current code.\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: For building the UI with components and managing state.\n    *   `useState`: React hook for managing component state.\n    *   `useEffect`: React hook for performing side effects (like data fetching).\n    *   `../components/Navbar`: Imports a Navbar component (not defined in the provided code).\n    *   `../components/Login`: Imports a Login component (not defined in the provided code).\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `fetch('/api/profile', { method: 'POST' })`:  Fetches user profile data from a backend API endpoint.\n    *   `Navbar`:  The imported Navbar component.\n    *   `Login`: The imported Login component.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `div`: Used for layout and content containers.\n    *   `h3`, `p`: Used for text display.\n    *   `dialog`: DaisyUI modal component.\n    *   `button`: DaisyUI button component.\n\n6.  **What props or state does it manage?**\n\n    *   `cards`: State variable (of type `CardData[]`) to store the fetched profile data (posts).\n    *   `username`: State variable (string) to store the username.\n    *   `currentPath`: State variable (string) to store the current path. This code renders a page displaying a list of \"rant\" posts fetched from an API. It includes a navigation bar, a guide button, and displays the posts using a `Card3` component.\n\n2.  **Functions/Components:**\n\n    *   `getallposts`:\n        *   Parameters: None\n        *   Return Value: `Promise<any>` (likely an array of post objects)\n        *   Called within `useEffect`\n    *   `Rants`: (Component)\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called by the application's routing system\n    *   `onhandleGuideClick`:\n        *   Parameters: None\n        *   Return Value: None\n        *   Called by `GuideButton`'s `onClick` prop\n3.  **External dependencies and tools used:**\n\n    *   `axios`: For making HTTP requests to fetch data from the API.\n    *   `react`: Core library for building the UI.\n    *   `next/navigation`:  For client-side routing (using `useRouter`).\n    *   `react`: For managing component state and side effects.\n    *   `../components/Card2`: Custom component for displaying a card (not used in the final code)\n    *   `../components/SearchBarArr2`: Custom component for a search bar (not used in the final code)\n    *   `../components/Card_course`: Custom component for displaying a course card (not used in the final code)\n    *   `../components/CompRand`: Custom component (used)\n    *   `../components/GuideBut`: Custom component for a button (used)\n    *   `../components/Navbar`: Custom component for a navigation bar (not used in the final code)\n    *   `next/link`: For creating links for navigation (used)\n    *   `../components/textBoxAI`: Custom component for a text box (not used in the final code)\n    *   `../components/Card3`: Custom component for displaying a card (used)\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/allgeneralposts`: API endpoint to fetch \"rant\" posts.\n    *   `Card3`: Displays individual post data.\n    *   `GuideButton`:  Navigates to a guide page.\n    *   `CompRand`: Displays a random component.\n    *   `Link`: Navigates to a create new post page.\n    *   `useRouter`: Used to navigate to the `/guide` route.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `Card3`: Custom component for displaying posts.\n    *   `GuideButton`: Custom component for a button.\n    *   `Link`: Next.js component for creating links.\n    *   Basic HTML elements: `div`, `p`, `a`.\n    *   Tailwind CSS classes for styling (e.g., `flex`, `text-center`, `bg-[#1e1e1e]`).\n\n6.  **What props or state does it manage?**\n\n    *   `posts`: State variable holding an array of post objects (`PostType[]`). Initialized as an empty array.\n    *   `loading`: State variable indicating whether the posts are being loaded (boolean). Initialized to `true`.\n    *   `homeRenderer`: State variable to trigger re-renders (boolean). Initialized to `false`.\n    *   `image`: State variable to hold an image file (File | null). Initialized to `null`.\n    *   `title`: State variable to hold a title (string). Initialized to \"\".\n    *   `content`: State variable to hold content (string). Initialized to \"\". This code defines a React component for a course rating form. Users can input information about a course, professor, and their experience, and submit the data.\n\n2.  **Functions/Components:**\n\n    *   `CourseRate`:\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called: Directly rendered as a page.\n    *   `handleAttendanceClick`:\n        *   Parameters: `value: string`\n        *   Return Value: None\n        *   Called: When a button representing an attendance option is clicked.\n    *   `handlesearchClick`:\n        *   Parameters: None\n        *   Return Value: None\n        *   Called: When the search button is clicked (currently does nothing).\n    *   `handleCourseClick`:\n        *   Parameters: `value: string`\n        *   Return Value: None\n        *   Called: When a button representing a coursework option is clicked.\n    *   `handleGradeClick`:\n        *   Parameters: `value: string`\n        *   Return Value: None\n        *   Called: When a button representing a grading policy is clicked.\n    *   `handleProfSelect`:\n        *   Parameters: `profName: string`\n        *   Return Value: None\n        *   Called: When a professor is selected from the dropdown.\n    *   `handleonClickPost`:\n        *   Parameters: None\n        *   Return Value: None (async)\n        *   Called: When the \"POST\" button is clicked.\n    *   `handleProfSearchChange`:\n        *   Parameters: `e: React.ChangeEvent<HTMLInputElement>`\n        *   Return Value: None\n        *   Called: When the professor search input changes.\n    *   `fetchProfessors`:\n        *   Parameters: None\n        *   Return Value: None (async)\n        *   Called: Inside `useEffect` when `searchText` changes.\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: Core React library for building the UI.\n    *   `useState`, `useEffect`: React hooks for managing state and side effects.\n    *   `axios`: For making HTTP requests (to `/api/allprof` and `/api/rate`).\n    *   `next/navigation`: For client-side routing (`useRouter`).\n    *   `zod`: For data validation (`rateSchema`).\n    *   `next/image`: For optimized image loading.\n    *   `BlueBut`: Custom component (likely a button).\n    *   `Rating`: Custom component (likely a star rating component).\n    *   `SearchBarArr2`: Custom component (likely a search bar).\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/allprof` (POST): API endpoint to fetch a list of professors based on the department name.\n    *   `/api/rate` (POST): API endpoint to submit the course rating data.\n    *   `BlueBut`, `Rating`, `SearchBarArr2`: Custom components used within the UI.\n    *   `router.push('/home')`: Navigates to the home page after successful submission.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `Image`: For the close button.\n    *   `input`: For text inputs (course search, professor search, grade average, audit grade).\n    *   `button`: For the \"POST\" button.\n    *   Custom components: `BlueBut`, `Rating`, `SearchBarArr2`.\n    *   `div`, `p`, `h1`: For layout and text display.\n    *   Dropdown for professor selection.\n\n6.  **What props or state does it manage?**\n\n    *   `attendance`: (string) Selected attendance option ('0', '1', '2', or '3').\n    *   `rating`: (number) The star rating (0-7).\n    *   `courses`: (boolean[]) An array of booleans, representing selected coursework options.\n    *   `grade`: (string) Selected grading policy ('0', '1', or '2').\n    *   `gradeAvg`: (string) The grade average input.\n    *   `auditGrade`: (string) The audit grade input.\n    *   `searchText`: (string) The course search text.\n    *   `profSearchText`: (string) The professor search text.\n    *   `profList`: (string[]) List of professors to display in the dropdown.\n    *   `allProfList`: (string[]) Complete list of professors.\n    *   `showProfDropdown`: (boolean) Controls the visibility of the professor dropdown."})
CREATE (:Endpoint {id: "endpoint_details", name: "details", description: "Custom component, likely a navigation bar"})
CREATE (:Endpoint {id: "endpoint_text", name: "text", description: "(Commented out) A custom search bar component *   **GetPosts:** Calls `filterRateCards` to search for courses based on extracted parameters and returns the results"})
CREATE (:File {id: "route_ts", name: "route.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\api\\addprof\\route.ts", type: "app-route", description: "This code defines a Next.js API route that handles POST requests to add professors to a department in a MongoDB database. It either creates a new department or adds professors to an existing one.\n\n2.  **Functions/Components:**\n\n    *   `POST(req: NextRequest): Promise<NextResponse>`:\n        *   **Parameters:** `req: NextRequest` (incoming request object)\n        *   **Return Value:** `Promise<NextResponse>` (response object)\n        *   **Called:** Automatically by Next.js when a POST request is made to this route.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/server`: Provides `NextRequest` and `NextResponse` for handling requests and responses in Next.js API routes.\n    *   `@/app/models/prof`:  Likely a Mongoose model definition for a \"Department\" (or \"Professor\") collection in MongoDB.\n    *   `@/libs/mongodb`:  Likely a function to connect to the MongoDB database.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `Department` (Mongoose model): Used to interact with the \"Department\" collection in MongoDB (e.g., `findOne`, `save`).\n    *   `connectToDatabase()`:  Used to establish a connection to the MongoDB database.\n\n5.  **What HTTP methods does it handle?**\n\n    *   POST\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   The request body is expected to be JSON and conform to the `AddProfessorRequest` interface:\n        *   `departmentName`: string (required)\n        *   `professorName`: string[] (required, an array of professor names)\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   **201 Created:**\n        *   `{ message: 'Department not found, so a new department was created and professors were added.', department: Department }` (if department didn't exist)\n        *   `{ message: 'Professors added successfully', addedProfessors: string[], department: Department }` (if professors were added to an existing department)\n    *   **400 Bad Request:**\n        *   `{ error: 'Missing or invalid fields: departmentName must be a string, professorName must be a non-empty array' }` (if required fields are missing or invalid)\n        *   `{ error: 'All professor names already exist in this department' }` (if all professor names already exist)\n    *   **502 Bad Gateway:**\n        *   `{ error: 'Failed to add professors' }` (if an error occurs during the process) This code defines a Next.js API route that retrieves and aggregates course rating data. It fetches unique courses, calculates average ratings per professor for each course, and returns the combined data in a JSON format.\n\n2.  **Functions/Components:**\n\n    *   `GET()`:\n        *   Parameters: None\n        *   Return Value: `NextResponse` (JSON response)\n        *   Called: When a GET request is made to this API route.\n    *   `allratedcourses()`:\n        *   Parameters: None\n        *   Return Value: Promise resolving to an array of course objects (likely containing `courseCategory` and `courseCode` properties).\n        *   Called: Inside `GET()`.\n    *   `getAverageRatingByProf()`:\n        *   Parameters:\n            *   `courseCategory`: `string`\n            *   `courseCode`: `string`\n        *   Return Value: Promise resolving to an array of professor rating objects (likely containing `profName`, `averageRating`, and other rating-related properties).\n        *   Called: Inside `GET()`.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/server`: Used for creating the API route and returning responses.\n    *   `@/app/middlewares/allratedcourses`:  A module that fetches a list of all rated courses.\n    *   `@/app/middlewares/averateRating`: A module that calculates the average rating for a course by professor.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Interacts with the `allratedcourses` and `getAverageRatingByProf` middleware functions to fetch and process data.\n    *   Uses `NextResponse.json` to format and return the API response.\n\n5.  **What HTTP methods does it handle?**\n\n    *   `GET`\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   None. This is a GET request with no expected parameters in the URL or body.\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   `200 OK`:\n        *   Format: JSON array of course rating objects. Each object contains course information (`courseCategory`, `courseCode`) and professor rating details (`profName`, `averageRating`, etc.).\n    *   `500 Internal Server Error`:\n        *   Format: JSON object with an `error` field describing the failure. This code defines API routes for retrieving and creating general posts. It handles GET requests to fetch posts based on their type and POST requests to create new posts, including image uploads.\n\n2.  **Functions/Components:**\n\n    *   `GET(request: NextRequest): Promise<NextResponse>`\n        *   **Parameters:** `request: NextRequest` (Next.js request object)\n        *   **Return Value:** `Promise<NextResponse>` (JSON response containing an array of posts)\n        *   **Called:** When a GET request is made to this route.\n        *   **Logic:** Connects to the database, retrieves all posts of a specified `postType` from the query parameters, reverses the order, and returns them as a JSON response.\n    *   `streamToBuffer(stream: ReadableStream<Uint8Array>): Promise<Buffer | null>`\n        *   **Parameters:** `stream: ReadableStream<Uint8Array>` (a readable stream)\n        *   **Return Value:** `Promise<Buffer | null>` (a buffer containing the stream data, or null if the stream is null)\n        *   **Called:** By the POST method to convert the request body to a buffer.\n        *   **Logic:** Reads the stream chunk by chunk and concatenates them into a buffer.\n    *   `POST(req: NextRequest): Promise<NextResponse>`\n        *   **Parameters:** `req: NextRequest` (Next.js request object)\n        *   **Return Value:** `Promise<NextResponse>` (JSON response indicating success or failure)\n        *   **Called:** When a POST request is made to this route.\n        *   **Logic:**\n            *   Authenticates the user using a token from cookies.\n            *   Parses form data from the request, including title, postType, content, tags, and an optional image.\n            *   Validates required fields.\n            *   Connects to the database.\n            *   If an image is provided, converts it to a buffer and uploads it using `uploadImage`.\n            *   Creates a new post in the database with the extracted data.\n            *   Returns a success or error response.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/server`: Provides `NextRequest` and `NextResponse` for handling HTTP requests and responses in Next.js.\n    *   `@/app/models/generalpost`:  Likely a Mongoose model for interacting with a database collection of general posts.\n    *   `@/libs/mongodb`:  A module for connecting to a MongoDB database.\n    *   `@/app/middlewares/verifyToken`: A middleware function to verify user authentication tokens.\n    *   `@/app/middlewares/uploadimage`: A middleware function to upload images (likely to a cloud storage service like Cloudinary).\n    *   `stream`: Node.js built-in module for working with streams.\n    *   `multiparty`: A library for parsing form data (commented out in the current version).\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `GeneralPost` model (from `@/app/models/generalpost`): Used for database interactions (finding and creating posts).\n    *   `connectToDatabase` (from `@/libs/mongodb`): Used to establish a connection to the MongoDB database.\n    *   `verifyToken` (from `@/app/middlewares/verifyToken`): Used to authenticate users.\n    *   `uploadImage` (from `@/app/middlewares/uploadimage`): Used to upload images to a storage service.\n    *   MongoDB database: The ultimate data store for the posts.\n\n5.  **What HTTP methods does it handle?**\n\n    *   `GET`\n    *   `POST`\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   **GET:**\n        *   `postType` (in query parameters):  Specifies the type of posts to retrieve.\n    *   **POST:**\n        *   `token` (in cookies):  Authentication token.\n        *   `title` (in form data):  The title of the post (required).\n        *   `postType` (in form data): The type of the post (required).\n        *   `content` (in form data):  The content of the post (required).\n        *   `tags` (in form data):  An array of tags (JSON string).\n        *   `image` (in form data):  An optional image file.\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   **GET:**\n        *   `200 OK`:  Returns a JSON array of posts.\n    *   **POST:**\n        *   `201 Created`:  Returns a JSON object with a success message and the created post.\n        *   `400 Bad Request`:  Returns a JSON object with an error message if required fields are missing.\n        *   `401 Unauthorized`:  Returns a JSON object with an error message if the token is missing or invalid.\n        *   `502 Bad Gateway`:  Returns a JSON object with an error message if there's a database or other server-side error. This code defines API routes for fetching and creating posts. It handles GET requests to retrieve all posts and POST requests to create a new post, including authentication and data validation.\n\n2.  **Functions/Components:**\n\n    *   `GET()`:\n        *   Parameters: None\n        *   Return Value: `NextResponse` (JSON array of posts, reversed)\n        *   Called: When a GET request is made to the route.\n    *   `POST(req: NextRequest)`:\n        *   Parameters: `req: NextRequest` (incoming request object)\n        *   Return Value: `NextResponse` (JSON response with success/error message and status code)\n        *   Called: When a POST request is made to the route.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/server`: `NextRequest`, `NextResponse` (for handling requests and responses in Next.js API routes)\n    *   `@/app/models/post`: `Post` (Mongoose model for post data)\n    *   `@/libs/mongodb`: `connectToDatabase` (function to connect to MongoDB)\n    *   `@/app/middlewares/verifyToken`: `verifyToken` (function to verify JWT token)\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `Post.find()`: Mongoose method to retrieve all posts from the database.\n    *   `Post.create()`: Mongoose method to create a new post in the database.\n    *   `connectToDatabase()`: Connects to the MongoDB database.\n    *   `verifyToken(token)`: Verifies a JWT token and returns the user data if valid.\n\n5.  **What HTTP methods does it handle?**\n\n    *   `GET`\n    *   `POST`\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   `POST`:\n        *   Expects a JSON body with the following fields: `courseCategory`, `courseCode`, `prof`, `content`.\n        *   Expects a \"token\" cookie for authentication.\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   `GET`:\n        *   `200 OK`: Returns a JSON array of posts.\n    *   `POST`:\n        *   `201 Created`: Returns a JSON object with a success message and the created post.\n        *   `400 Bad Request`: Returns a JSON object with an error message if required fields are missing.\n        *   `401 Unauthorized`: Returns a JSON object with an error message if the token is missing or invalid.\n        *   `502 Bad Gateway`: Returns a JSON object with an error message if there's a server error. This code defines a Next.js API route that retrieves a list of professors associated with a specific department from a MongoDB database.\n\n2.  **Functions/Components:**\n\n    *   `POST(req: NextRequest): Promise<NextResponse>`\n        *   **Parameters:** `req`: `NextRequest` (incoming HTTP request)\n        *   **Return Value:** `Promise<NextResponse>` (HTTP response)\n        *   **Called:** Automatically by Next.js when a POST request is made to this route.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/server`: Provides `NextRequest` and `NextResponse` for handling API requests and responses.\n    *   `@/app/models/prof`:  Likely a Mongoose model definition for a \"Department\" which contains a list of professors.\n    *   `@/libs/mongodb`:  A module to connect to the MongoDB database.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `Department.findOne()`:  Mongoose method to query the database for a department by name.\n    *   `connectToDatabase()`:  Function to establish a connection to the MongoDB database.\n\n5.  **What HTTP methods does it handle?**\n\n    *   POST\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   Expects a JSON body with a `departmentName` field (string).\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   **200 OK:**  Returns a JSON object with a `professors` array if the department is found.\n    *   **400 Bad Request:** Returns a JSON object with an `error` message if `departmentName` is missing.\n    *   **404 Not Found:** Returns a JSON object with an `error` message if the department is not found.\n    *   **500 Internal Server Error:** Returns a JSON object with an `error` message and `details` if an error occurs during processing. This code handles user login requests. It authenticates users by verifying their username and password against a database and, upon successful authentication, generates a token and sets it as a cookie.\n\n2.  **Functions/Components:**\n\n    *   `POST(req: NextRequest): Promise<Response>`\n        *   Parameters: `req: NextRequest` (incoming request object)\n        *   Return Value: `Promise<Response>` (HTTP response)\n        *   Called: When a POST request is made to this route.\n    *   `bcrypt.compare(password: string, existingUser.password: string): Promise<boolean>`\n        *   Parameters: `password: string`, `existingUser.password: string`\n        *   Return Value: `Promise<boolean>` (true if passwords match, false otherwise)\n        *   Called: Inside the `POST` function to compare the provided password with the stored hashed password.\n    *   `generateTokenAndSetCookie(existingUser._id: any): Response`\n        *   Parameters: `existingUser._id: any` (user's ID)\n        *   Return Value: `Response` (HTTP response with token cookie)\n        *   Called: Inside the `POST` function upon successful authentication.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/app/models/user`:  A module defining the User model (likely interacting with a database).\n    *   `@/libs/generateTokenAndSetCookies`: A module responsible for generating a token and setting it as a cookie in the response.\n    *   `@/libs/mongodb`: A module for connecting to a MongoDB database.\n    *   `bcrypt`:  A library for password hashing and comparison.\n    *   `next/server`:  Provides `NextRequest` for handling incoming requests.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `User` model (from `@/app/models/user`): Used to query the database for user information.\n    *   `connectToDatabase()` (from `@/libs/mongodb`): Used to establish a connection to the MongoDB database.\n    *   `generateTokenAndSetCookie()` (from `@/libs/generateTokenAndSetCookies`): Used to generate a token and set it as a cookie.\n\n5.  **What HTTP methods does it handle?**\n\n    *   `POST`\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   Expects a JSON body with the following fields:\n        *   `username`: string\n        *   `password`: string\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   `200 OK`:  (from `generateTokenAndSetCookie`)  Returns a response with a token cookie set upon successful login.\n    *   `400 Bad Request`: Returns a JSON response with a message indicating an invalid username or password.\n    *   `500 Internal Server Error`: Returns a JSON response with a generic error message if an error occurs during the login process. This code handles a logout functionality by deleting an authentication token cookie and redirecting the user to the login/signup page.\n\n2.  **Functions/Components:**\n\n    *   `DELETE(req: Request): Promise<NextResponse>`\n        *   Parameters: `req: Request` (incoming request object)\n        *   Return Value: `Promise<NextResponse>` (HTTP response)\n        *   Called: When a DELETE request is made to this route.\n        *   Internal calls: `cookies()`, `NextResponse.redirect()`, `NextResponse.json()`\n\n3.  **External dependencies and tools used:**\n\n    *   `next/server`: Provides `NextResponse` for creating HTTP responses.\n    *   `next/headers`: Provides `cookies` for accessing and manipulating cookies.\n    *   `process.env`: Accesses environment variables (e.g., `NODE_ENV`).\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `cookies()`: Retrieves the cookies associated with the request.\n    *   `/loginSignup`: The URL the user is redirected to after logout.\n\n5.  **What HTTP methods does it handle?**\n\n    *   DELETE\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   None. It doesn't use any request parameters or body fields.\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   Status Code: 302 (redirect) on success.\n        *   Format: Redirects to `/loginSignup` and deletes the `token` cookie.\n    *   Status Code: 500 (Internal Server Error) on failure.\n        *   Format: JSON: `{ error: 'Failed to logout' }` This code handles user signup requests. It validates user input, checks for existing usernames, hashes passwords, saves new users to a database, and generates a token to set as a cookie upon successful signup.\n\n2.  **Functions/Components:**\n\n    *   `POST(req: NextRequest): Promise<Response>`\n        *   Parameters: `req: NextRequest` (incoming request object)\n        *   Return Value: `Promise<Response>` (HTTP response)\n        *   Called: When a POST request is made to this route.\n        *   Inside:\n            *   Extracts `username` and `password` from the request body.\n            *   Validates the presence of `username` and `password`.\n            *   Connects to the database using `connectToDatabase()`.\n            *   Checks if a user with the given `username` already exists.\n            *   Validates the password length.\n            *   Hashes the password using `bcrypt`.\n            *   Creates a new `User` object and saves it to the database.\n            *   Calls `generateTokenAndSetCookie()` to generate a token and set it as a cookie.\n            *   Handles errors and returns appropriate error responses.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/app/models/user`:  A module defining the User model (likely using Mongoose or a similar ODM).\n    *   `@/libs/generateTokenAndSetCookies`: A module containing a function to generate a JWT and set it as a cookie.\n    *   `@/libs/mongodb`: A module containing a function to connect to a MongoDB database.\n    *   `bcrypt`:  A library for password hashing.\n    *   `next/server`:  Provides `NextRequest` for handling incoming requests in Next.js API routes.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `User` model (from `@/app/models/user`): Used for database operations (findOne, save).\n    *   `generateTokenAndSetCookie(newUser._id)` (from `@/libs/generateTokenAndSetCookies`): Called to generate a token and set it as a cookie.\n    *   `connectToDatabase()` (from `@/libs/mongodb`): Called to establish a database connection.\n    *   `bcrypt.genSalt(10)`: Used to generate a salt for password hashing.\n    *   `bcrypt.hash(password, salt)`: Used to hash the password.\n\n5.  **What HTTP methods does it handle?**\n\n    *   `POST`\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   Expects a JSON body with the following fields:\n        *   `username`: (string) The desired username.\n        *   `password`: (string) The desired password.\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   `200 OK`: (from `generateTokenAndSetCookie`)  Upon successful signup (likely sets a cookie).  The exact response body depends on `generateTokenAndSetCookie`.\n    *   `400 Bad Request`:\n        *   `{ message: 'All fields are required' }` if `username` or `password` is missing.\n        *   `{ message: 'Username already taken' }` if the username already exists.\n        *   `{ message: 'Password must be at least 8 characters long' }` if the password is too short.\n    *   `500 Internal Server Error`: `{ message: 'Error signing up' }` if an error occurs during the signup process. This code defines a Next.js API route that handles POST requests to flag a post in a MongoDB database. It increments a `flagCount` field on the specified post.\n\n2.  **Functions/Components:**\n\n    *   `POST(req: NextRequest): Promise<NextResponse>`\n        *   Parameters: `req: NextRequest` (incoming request)\n        *   Return Value: `Promise<NextResponse>` (response to the client)\n        *   Called: Automatically by Next.js when a POST request is made to this route.\n        *   Inside:\n            *   Extracts `userId` from the request body (JSON).\n            *   Connects to the MongoDB database using `connectToDatabase()`.\n            *   Finds a post by `userId` and increments its `flagCount` using `Post.findByIdAndUpdate()`.\n            *   Returns a success or error response based on the outcome.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/libs/mongodb`:  Likely a module to connect to a MongoDB database.\n    *   `@/app/models/post`:  Likely a Mongoose model representing a post in the database.\n    *   `next/server`: Provides `NextRequest` and `NextResponse` for handling API requests and responses.\n    *   MongoDB: Database used to store and retrieve post data.\n    *   Mongoose: Object modeling tool for MongoDB.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `connectToDatabase()`:  Used to establish a connection to the MongoDB database.\n    *   `Post`: Mongoose model used to interact with the 'post' collection in MongoDB.\n    *   `Post.findByIdAndUpdate()`: Mongoose method to find a document by ID and update it.\n\n5.  **What HTTP methods does it handle?**\n\n    *   POST\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   Expects a JSON body with a `userId` field (likely a MongoDB ObjectId).\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   `200 OK`:  JSON: `{ message: 'Post flagged successfully.', post: updatedPost }` (on success)\n    *   `400 Bad Request`: JSON: `{ error: 'Object ID is required.' }` (if `userId` is missing)\n    *   `404 Not Found`: JSON: `{ error: 'Post not found.' }` (if post with given `userId` is not found)\n    *   `500 Internal Server Error`: JSON: `{ error: 'Failed to flag post.' }` (on any other error) This code defines an API route that handles POST requests. It authenticates a user based on a token extracted from cookies, and upon successful authentication, returns a success message and the username.\n\n2.  **Functions/Components:**\n\n    *   `POST(req: NextRequest): Promise<NextResponse>`\n        *   Parameters: `req: NextRequest` (incoming request object)\n        *   Return Value: `Promise<NextResponse>` (response object)\n        *   Called: When a POST request is made to this route.\n        *   Logic:\n            *   Extracts a token from the request cookies.\n            *   If no token, returns a 401 Unauthorized error.\n            *   Connects to a MongoDB database.\n            *   Calls `verifyToken` to validate the token.\n            *   If the token is invalid, returns a 401 Unauthorized error.\n            *   Extracts the username from the validated user object.\n            *   Returns a 200 OK response with a success message and the username.\n            *   Catches errors and returns a 500 Internal Server Error.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/app/middlewares/verifyToken`:  A module that likely handles token verification (e.g., JWT validation).\n    *   `@/libs/mongodb`: A module that handles the MongoDB connection.\n    *   `next/server`:  Provides `NextRequest` and `NextResponse` objects for handling requests and responses in a Next.js API route.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `verifyToken`:  Used to validate the authentication token.\n    *   `connectToDatabase`: Used to establish a connection to the MongoDB database.\n    *   `req.cookies.get(\"token\")`: Used to extract the token from the request cookies.\n    *   `NextResponse.json()`: Used to construct the response body.\n\n5.  **HTTP methods:**\n\n    *   POST\n\n6.  **Request parameters or body fields it expects:**\n\n    *   Expects a \"token\" cookie.\n\n7.  **Responses it returns (status codes and formats):**\n\n    *   `200 OK`:  `{ message: 'Posts fetched successfully', username: string }`\n    *   `401 Unauthorized`: `{ message: 'Authorization token is missing' }` or `{ message: 'Invalid or expired token' }`\n    *   `500 Internal Server Error`: `{ error: 'Failed to fetch username', details: error }` This code handles a POST request to check if a user has upvoted a post. It authenticates the user, retrieves the post ID from the request body, connects to a MongoDB database, and checks if the user's ID is present in the post's upvotes array.\n\n2.  **Functions/Components:**\n\n    *   `POST(request: NextRequest): Promise<NextResponse>`\n        *   Parameters: `request: NextRequest` (incoming HTTP request).\n        *   Return Value: `Promise<NextResponse>` (HTTP response).\n        *   Called: When a POST request is made to this route.\n    *   `verifyToken(token: string): Promise<any>`\n        *   Parameters: `token: string` (JWT token).\n        *   Return Value: `Promise<any>` (user object if token is valid, otherwise null or error).\n        *   Called: Inside `POST` to authenticate the user.\n    *   `connectToDatabase(): Promise<void>`\n        *   Parameters: None\n        *   Return Value: `Promise<void>`\n        *   Called: Inside `POST` to establish a connection to the MongoDB database.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/server`: Provides `NextRequest` and `NextResponse` for handling HTTP requests and responses in Next.js.\n    *   `@/app/models/generalpost`: Likely a Mongoose model for interacting with the `generalpost` collection in MongoDB.\n    *   `@/libs/mongodb`: Likely a module for connecting to the MongoDB database.\n    *   `@/app/middlewares/verifyToken`: A middleware function to verify JWT tokens.\n    *   Mongoose: Used for interacting with MongoDB.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `GeneralPost` model: Used to find and update posts in the database.\n    *   MongoDB: The database where post data is stored.\n    *   `verifyToken` middleware: Used for user authentication.\n\n5.  **What HTTP methods does it handle?**\n\n    *   POST\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   Expects a JSON body with a `postId` field.\n    *   Expects a \"token\" cookie for authentication.\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   200 OK:  `{ message: 'checked whether upvoted or not successfully', hasUpvoted: boolean }`\n    *   400 Bad Request: `{ message: 'Post ID is required' }`\n    *   401 Unauthorized: `{ message: 'Authentication required' }` or `{ message: 'Invalid or expired token' }`\n    *   500 Internal Server Error: `{ message: 'Failed to upvote post' }` This code defines an API route that retrieves a user's posts from a database. It handles authentication, connects to a MongoDB database, and returns the posts in JSON format.\n\n2.  **Functions/Components:**\n\n    *   `POST(req: NextRequest): Promise<NextResponse>`:\n        *   Parameters: `req: NextRequest` (incoming request object)\n        *   Return Value: `Promise<NextResponse>` (response object)\n        *   Called: When a POST request is made to this route.\n        *   Extracts a token from cookies.\n        *   Authenticates the user using `verifyToken`.\n        *   Connects to the database using `connectToDatabase`.\n        *   Fetches posts for the authenticated user from the `Post` model.\n        *   Returns the posts or an error message.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/app/middlewares/verifyToken`:  A module to verify JWT tokens.\n    *   `@/app/models/post`:  A Mongoose model for the `Post` collection.\n    *   `@/libs/mongodb`: A module to connect to MongoDB.\n    *   `next/server`:  Provides `NextRequest` and `NextResponse` for handling API requests in Next.js.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `verifyToken`:  Authenticates the user based on the provided token.\n    *   `connectToDatabase`: Establishes a connection to the MongoDB database.\n    *   `Post.find()`:  Mongoose method to query the `Post` collection.\n\n5.  **HTTP methods it handles:**\n\n    *   POST\n\n6.  **Request parameters or body fields it expects:**\n\n    *   POST: Expects a token in the `token` cookie.\n\n7.  **Responses it returns (status codes and formats):**\n\n    *   `401 Unauthorized`:  `{ message: 'Authorization token is missing' }` or `{ message: 'Invalid or expired token' }`\n    *   `200 OK`: `{ message: 'Posts fetched successfully', username: string, posts: Post[] }` or `{ message: `No posts found for user: ${username}`, username: string, posts: [] }`\n    *   `500 Internal Server Error`: `{ error: 'Failed to fetch user posts', details: error }` This code defines an API endpoint that handles POST requests to create new rate card entries in a database. It receives data from the request body, validates it, connects to a MongoDB database, creates a new `RateCard` document, and returns a success or error response.\n\n2.  **Functions/Components:**\n\n    *   `POST(req: NextRequest): Promise<NextResponse>`\n        *   **Parameters:** `req`: `NextRequest` (incoming request object)\n        *   **Return Value:** `Promise<NextResponse>` (response object)\n        *   **Called:** Automatically by the Next.js server when a POST request is made to this route.\n        *   **Functionality:**\n            *   Parses the request body as JSON.\n            *   Validates required fields (`courseCategory`, `courseCode`, `profName`, `starRating`, `attendance`, `courseContent`, `gradingPolicy`, `gradeAvg`).\n            *   Connects to the MongoDB database using `connectToDatabase()`.\n            *   Creates a new `RateCard` document using the `RateCard.create()` method.\n            *   Returns a success response (201) with the created rate card or an error response (400 or 500) if validation fails or an error occurs.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/app/models/rateCard`:  A module defining the `RateCard` model (likely a Mongoose model for MongoDB).\n    *   `next/server`: Provides `NextResponse` and `NextRequest` for handling HTTP requests and responses in Next.js.\n    *   `@/libs/mongodb`: A module containing the `connectToDatabase` function for connecting to a MongoDB database.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `RateCard` model: Used to create new rate card entries in the database.\n    *   `connectToDatabase()`: Function to establish a connection to the MongoDB database.\n\n5.  **What HTTP methods does it handle?**\n\n    *   POST\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   The request body is expected to be in JSON format and contain the following fields:\n        *   `courseCategory`: string\n        *   `courseCode`: string\n        *   `profName`: string\n        *   `starRating`: number\n        *   `attendance`: string\n        *   `courseContent`: string\n        *   `gradingPolicy`: string\n        *   `gradeAvg`: number\n        *   `auditgrade`: string (optional)\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   **201 Created:**\n        *   Body: `{ message: 'Rate card created successfully', rateCard: newRateCard }` (JSON)\n    *   **400 Bad Request:**\n        *   Body: `{ error: 'Missing required fields. Please provide all required fields.' }` (JSON)\n    *   **500 Internal Server Error:**\n        *   Body: `{ error: 'Failed to create rate card' }` (JSON) This code handles the upvoting/unvoting of a post. It authenticates the user, retrieves the post ID from the request body, updates the post's upvote count in the database, and returns the updated upvote information.\n\n2.  **Functions/Components:**\n\n    *   `POST(request: NextRequest): Promise<NextResponse>`\n        *   **Parameters:** `request: NextRequest` (incoming HTTP request)\n        *   **Return Value:** `Promise<NextResponse>` (HTTP response)\n        *   **Called:** When a POST request is made to this route.\n    *   `verifyToken(token: string): Promise<any>`\n        *   **Parameters:** `token: string` (JWT token)\n        *   **Return Value:** `Promise<any>` (user object if token is valid, otherwise null/undefined)\n        *   **Called:** Inside `POST` to authenticate the user.\n    *   `connectToDatabase(): Promise<void>`\n        *   **Parameters:** None\n        *   **Return Value:** `Promise<void>`\n        *   **Called:** Inside `POST` to establish a database connection.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/server`: `NextRequest`, `NextResponse` (for handling HTTP requests and responses in Next.js)\n    *   `@/app/models/generalpost`: `GeneralPost` (likely a Mongoose model for interacting with the database)\n    *   `@/libs/mongodb`: `connectToDatabase` (function to connect to the MongoDB database)\n    *   `@/app/middlewares/verifyToken`: `verifyToken` (function to verify JWT tokens)\n    *   Mongoose (implicitly through `GeneralPost`)\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `GeneralPost` model (for database interactions: finding, updating posts)\n    *   MongoDB database\n    *   `verifyToken` middleware (for authentication)\n\n5.  **HTTP methods:**\n\n    *   POST\n\n6.  **Request parameters or body fields:**\n\n    *   Expects a JSON body with a `postId` field (string).\n    *   Expects a cookie named \"token\"\n\n7.  **Responses:**\n\n    *   `200 OK`:  JSON with `message`, `upvotes` (array of user IDs), and `hasUpvoted` (boolean) on successful upvote/unvote.\n    *   `400 Bad Request`: JSON with `message` if `postId` is missing.\n    *   `401 Unauthorized`: JSON with `message` if authentication fails (missing or invalid token).\n    *   `404 Not Found`: JSON with `message` if the post is not found.\n    *   `500 Internal Server Error`: JSON with `message` if an error occurs during the process. This code defines a route handler for a POST request, likely used for user authentication or creating a resource after verifying a token. It extracts a token from cookies, validates it, and returns a success or error response.\n\n2.  **Functions/Components:**\n\n    *   `POST(req: NextRequest): Promise<NextResponse>`\n        *   Parameters: `req: NextRequest` (incoming request object)\n        *   Return Value: `Promise<NextResponse>` (response object)\n        *   Called: Automatically by the Next.js server when a POST request is made to this route.\n    *   `verifyToken(token: string): Promise<any>` (assumed external function)\n        *   Parameters: `token: string` (the token to verify)\n        *   Return Value: `Promise<any>` (resolved with user data if valid, or rejected if invalid)\n        *   Called: Inside the `POST` function to validate the token.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/app/middlewares/verifyToken`:  An assumed module that exports the `verifyToken` function.\n    *   `next/server`: Provides `NextRequest` and `NextResponse` for handling requests and responses in Next.js API routes.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `verifyToken`:  An external function used for token validation.\n    *   `NextRequest`:  Used to access request data (cookies, headers, body).\n    *   `NextResponse`: Used to construct and return the response.\n\n5.  **What HTTP methods does it handle?**\n\n    *   POST\n\n6.  **What request parameters or body fields does it expect?**\n\n    *   Expects a cookie named \"token\" containing the authentication token.\n    *   The commented-out code suggests it *might* have expected a JSON body with fields like `courseCategory`, `courseCode`, `prof`, and `content` in a previous version.\n\n7.  **What responses does it return (status codes and formats)?**\n\n    *   `201 Created`:  `{ message: 'User is Signed in' }` (success)\n    *   `401 Unauthorized`: `{ message: 'Authorization token is missing' }` or `{ message: 'Invalid or expired token' }` (token missing or invalid)\n    *   `400 Bad Request`: `{ error: 'Missing required fields: courseCategory, courseCode, prof, content' }` (if the body fields were required)\n    *   `502 Bad Gateway`: `{ error: 'Failed to create post', details: error }` (for unexpected errors)"})
CREATE (:Endpoint {id: "endpoint_requests", name: "requests", description: "**"})
CREATE (:Endpoint {id: "endpoint_request", name: "request", description: "** `Promise<NextResponse>` (outgoing response) *   Parameters: None ** ** ** `Promise<NextResponse>` (HTTP response) ** Promise<NextResponse>` ** ** ** ** `Promise<NextResponse>` (response object) ** ** ** ** **"})
CREATE (:Endpoint {id: "endpoint_6", name: "6", description: "*   `departmentName`: string (required) **  Returns a JSON object with a `professors` array if the department is found 302 (redirect) on success JSON: `{ message: 'Post flagged successfully ** `{ message: 'checked whether upvoted or not successfully', hasUpvoted: boolean }` ** *   `courseCategory`: string ** `{ message: 'User is Signed in' }` (success)"})
CREATE (:Endpoint {id: "endpoint_based", name: "based", description: "**"})
CREATE (:Endpoint {id: "endpoint_or", name: "or", description: "**"})
CREATE (:Endpoint {id: "endpoint_with", name: "with", description: "any): Promise<any>` ** ** **"})
CREATE (:Endpoint {id: "endpoint_creation", name: "creation", description: "Inside the `POST` function when the `intent` is \"CreatePost\""})
CREATE (:Endpoint {id: "endpoint_and", name: "and", description: "**"})
CREATE (:Endpoint {id: "endpoint_created", name: "created", description: "any }` (for successful CreatePost)"})
CREATE (:Endpoint {id: "endpoint_method", name: "method", description: "** Reads the stream chunk by chunk and concatenates them into a buffer"})
CREATE (:Endpoint {id: "endpoint_in", name: "in", description: "**"})
CREATE (:Endpoint {id: "endpoint_data", name: "data", description: "** For the X icon Custom component for a blue button Core library for building the UI"})
CREATE (:Endpoint {id: "endpoint_by", name: "by", description: "*   Extracts `userId` from the request body (JSON)"})
CREATE (:Endpoint {id: "endpoint_flagged", name: "flagged", description: "updatedPost }` (on success)"})
CREATE (:Endpoint {id: "endpoint_not", name: "not", description: "JSON: `{ error: 'Post not found"})
CREATE (:Endpoint {id: "endpoint_id", name: "ID", description: "** Indicates if the post is AI-generated"})
CREATE (:Endpoint {id: "endpoint_the", name: "the", description: "**"})
CREATE (:Endpoint {id: "endpoint_is", name: "is", description: "string): Promise<any>` **"})
CREATE (:Endpoint {id: "endpoint_search", name: "search", description: "**"})
CREATE (:Endpoint {id: "endpoint_for", name: "for", description: "**"})
CREATE (:Endpoint {id: "endpoint_to", name: "to", description: "**"})
CREATE (:Endpoint {id: "endpoint_objects", name: "objects", description: "State variable (boolean) indicating whether posts are being loaded Inside `useEffect` hook (Component)"})
CREATE (:Endpoint {id: "endpoint_title", name: "title", description: "**"})
CREATE (:Endpoint {id: "endpoint_content", name: "content", description: "** Provides a search bar string): Promise<{ success: boolean, post?: any, error?: string }>`"})
CREATE (:File {id: "bluebut_tsx", name: "BlueBut.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\BlueBut.tsx", type: "app-component", description: "This code defines a reusable button component named `BlueBut` that renders a button with customizable text, border radius, background color, and click behavior. The button's background color changes based on the `isSelected` prop.\n\n2.  **Functions/Components:**\n\n    *   `BlueBut`:\n        *   Parameters:\n            *   `params`: `{ text: string; borderRadius: string; isSelected: boolean; }` (from `ButtonProps`)\n            *   `onClick`: `() => void` (from `ButtonProps`)\n        *   Return Value: JSX (a button element)\n        *   Called: Rendered in other components.\n\n3.  **External dependencies and tools used:**\n\n    *   `\"use client\"`:  Indicates this component is rendered on the client-side.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `onClick`:  A callback function passed as a prop, triggered when the button is clicked.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `<button>`: Standard HTML button element.\n    *   `btn`:  A CSS class, likely from DaisyUI, providing base button styling.\n\n6.  **What props or state does it manage?**\n\n    *   Props:\n        *   `params`:  An object containing `text` (button text), `borderRadius` (CSS border-radius), and `isSelected` (boolean for background color).\n        *   `onClick`: A function to be executed on button click.\n    *   State:  This component doesn't manage any internal state."})
CREATE (:File {id: "bluebut2_tsx", name: "BlueBut2.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\BlueBut2.tsx", type: "app-component", description: "This code defines a reusable button component named `BlueBut2` that renders a button with customizable text, border radius, and background color based on a `isSelected` state. It also handles a click event.\n\n2.  **Functions/Components:**\n\n    *   `BlueBut2`:\n        *   Parameters:\n            *   `params`: `{ text: string; borderRadius: string; isSelected: boolean; }`\n            *   `onClick`: `() => void`\n        *   Return Value: JSX (React element)\n        *   Called: By a parent component.\n\n3.  **External dependencies and tools used:**\n\n    *   `\"use client\"`:  Indicates this component is rendered on the client-side.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `onClick`:  This prop is a function passed from a parent component, which is executed when the button is clicked.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   Uses a standard HTML `<button>` element.\n    *   Uses the `btn` class, which is likely a Daisy UI class for button styling.\n\n6.  **What props or state does it manage?**\n\n    *   Props:\n        *   `params`:  An object containing `text`, `borderRadius`, and `isSelected`.\n        *   `onClick`: A function to handle button clicks.\n    *   State:\n        *   `isSelected`:  Determines the button's background color."})
CREATE (:File {id: "bluebutstat_tsx", name: "BlueButStat.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\BlueButStat.tsx", type: "app-component", description: "This code defines a reusable button component styled with a blue background and customizable text and border radius.\n\n2.  **Functions/Components:**\n\n    *   `BlueButStat`:\n        *   Parameters: `params: { text: string; borderRadius: string; }` (from `ButtonProps` interface)\n        *   Return Value: JSX (a button element)\n        *   Called: By a parent component that passes the `params` prop.\n\n3.  **External dependencies and tools used:**\n\n    *   `\"use client\"`:  Indicates this component is rendered on the client-side.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   None explicitly, but it's designed to be used within a larger application.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   Uses a standard HTML `<button>` element.\n    *   Applies CSS classes (`btn`) which likely come from a CSS framework like DaisyUI.\n\n6.  **What props or state does it manage?**\n\n    *   Props: `params` (object containing `text` and `borderRadius` strings).\n    *   State: None."})
CREATE (:File {id: "butnotsel_tsx", name: "ButNotSel.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\ButNotSel.tsx", type: "app-component", description: "This code defines a reusable button component that displays text and an input field. It's designed to have a specific visual style with a rounded border and a text input field.\n\n2.  **Functions/Components:**\n\n    *   `ButtonNotSel`:\n        *   Parameters: `params: { text: string; borderRadius: string; }` (from `ButtonProps` interface)\n        *   Return Value: JSX (React element)\n        *   Called: Directly used as a component.\n\n3.  **External dependencies and tools used:**\n\n    *   React\n    *   DaisyUI (implicitly through the `btn` class)\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   None explicitly, but it's designed to be used within a larger application.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `div` (HTML element)\n    *   `input` (HTML element)\n    *   `span` (HTML element)\n    *   DaisyUI: `btn btn-outline`\n\n6.  **What props or state does it manage?**\n\n    *   Props: `params` (object containing `text` and `borderRadius`)\n    *   State: None"})
CREATE (:Endpoint {id: "endpoint_field", name: "field", description: "** string` - The current text in the search input *   Parameters: `tag: string` *   Parameters: None"})
CREATE (:File {id: "butunsel_tsx", name: "ButUnsel.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\ButUnsel.tsx", type: "app-component", description: "This code defines a reusable button component with customizable text, border radius, and click behavior. It renders a button element with specific styling.\n\n2.  **Functions/Components:**\n\n    *   `ButtonUnsel`:\n        *   Parameters: `params: { text: string; borderRadius: string; }`, `onClick: () => void` (from `ButtonProps`)\n        *   Return Value: JSX (React element - a button)\n        *   Called: By a parent component that passes the necessary props.\n\n3.  **External dependencies and tools used:**\n\n    *   React (JSX syntax)\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `onClick`:  This prop is a function passed from a parent component, which is executed when the button is clicked.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `<button>` HTML element\n    *   `btn btn-outline` Daisy UI class\n\n6.  **What props or state does it manage?**\n\n    *   Props: `params` (containing `text` and `borderRadius`), `onClick`\n    *   State: None"})
CREATE (:File {id: "card_tsx", name: "Card.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\Card.tsx", type: "app-component", description: "This code defines a reusable card component that displays a title, username, content, and a delete button. It renders the card's structure and styles.\n\n2.  **Functions/Components:**\n\n    *   `Card`:\n        *   Parameters: `props: CardProps` (title: string, username: string, content: string)\n        *   Return Value: JSX (React element representing the card)\n        *   Called: By a parent component that passes the required props.\n    *   `styles`:\n        *   Parameters: None\n        *   Return Value: Object containing style definitions.\n        *   Called: Used within the `Card` component to style the elements.\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: Used for creating React components.\n    *   `./DeleteBut`: Imports a custom `DeleteBut` component.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Interacts with the `DeleteBut` component.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   Uses basic HTML elements: `div`, `p`, `h2`.\n    *   No Daisy UI components are used.\n\n6.  **What props or state does it manage?**\n\n    *   Manages props: `title`, `username`, and `content` passed from a parent component.\n    *   No state is managed within this component."})
CREATE (:Endpoint {id: "endpoint_button", name: "button", description: "**"})
CREATE (:File {id: "card2_tsx", name: "Card2.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\Card2.tsx", type: "app-component", description: "This code defines a React component, `Card2`, that displays a post with user information, content, and actions. It truncates long content and provides a \"Read More\" functionality.\n\n2.  **Functions/Components:**\n\n    *   `Card2`:\n        *   Parameters:\n            *   `id`: `string`\n            *   `isAI`: `string`\n            *   `content`: `string`\n            *   `username`: `string`\n            *   `coursecode`: `string`\n            *   `coursecategory`: `string`\n            *   `profname`: `string`\n            *   `date`: `string`\n        *   Return Value: JSX (React component)\n        *   Called: Directly rendered in a parent component.\n    *   `getInitials`:\n        *   Parameters: `name`: `string`\n        *   Return Value: `string` (initials of the name)\n        *   Called: Inside `Card2` to generate initials for the profile picture.\n    *   `getBackgroundColor`:\n        *   Parameters: `name`: `string`\n        *   Return Value: `string` (hex color code)\n        *   Called: Inside `Card2` to determine the background color for the profile picture based on the username's first letter.\n    *   `handleOnClick`:\n        *   Parameters: None\n        *   Return Value: `Promise<void>`\n        *   Called: When the \"Report\" option is clicked (via `PostTrippleDot`).\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: Core React library for building the component.\n    *   `useState`: React hook for managing component state.\n    *   `CSSProperties`: TypeScript type for CSS styling.\n    *   `axios`: For making HTTP requests (reporting the post).\n    *   `convertDate`: A utility function (from `../middlewares/convertDate`) to format the date.\n    *   `PostTrippleDot`: A custom component (from `./ReportComp`)\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `PostTrippleDot`: A component that likely handles the \"Report\" functionality.\n    *   `/api/flagPost`: API endpoint used to report a post (via `axios.post`).\n    *   `convertDate`: A utility function used to format the date string.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `div`: Used for layout and structure.\n    *   `p`: Used for displaying text (username, date, content).\n    *   `h2`: Used for displaying the title.\n    *   `span`: Used for the \"Read More\" link.\n    *   No DaisyUI components are explicitly used.\n\n6.  **What props or state does it manage?**\n\n    *   Props:\n        *   `id`: Post ID.\n        *   `isAI`: Indicates if the post is AI-generated.\n        *   `content`: The post's content.\n        *   `username`: The author's username.\n        *   `coursecode`: The course code.\n        *   `coursecategory`: The course category.\n        *   `profname`: The professor's name.\n        *   `date`: The post's date.\n    *   State:\n        *   `showFullContent`: A boolean state variable, which determines whether to show the full content or a truncated version."})
CREATE (:File {id: "card3_tsx", name: "Card3.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\Card3.tsx", type: "app-component", description: ""})
CREATE (:Endpoint {id: "endpoint_was", name: "was", description: "The content of the post"})
CREATE (:Endpoint {id: "endpoint_author", name: "author", description: "**"})
CREATE (:File {id: "card_course_tsx", name: "Card_course.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\Card_course.tsx", type: "app-component", description: "This code defines a React component that displays information about a course, including its code, professor, attendance policy, coursework, grading, and a rating. It also provides a link to rate the course.\n\n2.  **Functions/Components:**\n\n    *   `CardCourse`:\n        *   Parameters:\n            *   `id`: `string`\n            *   `coursecode`: `string`\n            *   `profName`: `string`\n            *   `attpolicy`: `string`\n            *   `coursework`: `string[]`\n            *   `grading`: `string`\n            *   `avgGrade`: `string`\n            *   `auditGrade`: `string`\n            *   `starNum`: `number`\n        *   Return Value: JSX (React component)\n        *   Called: Directly rendered in a parent component.\n    *   `router.push`:\n        *   Parameters: `/rateCourse`\n        *   Return Value: None\n        *   Called: Inside `onClick` handler of the \"Rate this course\" link.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/navigation`: Used for routing with `useRouter`.\n    *   `./RatingStatic`: A custom component for displaying a static rating.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `RatingStatic` component (from `./RatingStatic`)\n    *   `useRouter` hook (from `next/navigation`) to navigate to the `/rateCourse` route.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   Uses basic HTML elements: `div`, `p`.\n    *   Uses inline styles for layout and styling.\n    *   Uses `className` for styling with Tailwind CSS.\n\n6.  **What props or state does it manage?**\n\n    *   Manages props passed from a parent component via the `CardProps` interface.\n    *   No internal state management is present."})
CREATE (:File {id: "comprand_tsx", name: "CompRand.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\CompRand.tsx", type: "app-component", description: "This component renders a floating, interactive dropdown menu with options to navigate to different pages within a Next.js application. It uses a button with an icon to trigger the dropdown.\n\n2.  **Functions/Components:**\n\n    *   `CompRand`:\n        *   Parameters: None\n        *   Return Value: JSX (React component)\n        *   Called: Rendered as a component in the application.\n        *   `router.push(path: string)`: Navigates to the specified route. Called within the `onClick` handlers of the dropdown menu items.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/image`: For rendering images.\n    *   `next/navigation`: For programmatic navigation using `useRouter`.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `useRouter()`: Hook from `next/navigation` to access the router object for navigation.\n    *   `/createNewPost`, `/rateCourse`, `/guide`: Routes within the application that the dropdown navigates to.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `div` elements for layout and styling.\n    *   `Image` component from `next/image`.\n    *   `dropdown` class from DaisyUI.\n    *   `btn` class from DaisyUI.\n    *   `menu` class from DaisyUI.\n    *   `dropdown-content` class from DaisyUI.\n    *   `ul` and `li` elements for the dropdown menu.\n    *   `a` elements for the menu items.\n\n6.  **What props or state does it manage?**\n\n    *   **Props:** None.\n    *   **State:** None. It uses the `useRouter` hook, but it doesn't manage any local state."})
CREATE (:File {id: "completeblue_tsx", name: "CompleteBlue.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\CompleteBlue.tsx", type: "app-component", description: "This code defines a reusable button component that renders a blue button with customizable text and border radius.\n\n2.  **Functions/Components:**\n\n    *   `CompleteBlue`:\n        *   Parameters: `params: { text: string; borderRadius: string; }` (from `ButtonProps` interface).\n        *   Return Value: JSX (React element - a button).\n        *   Called: Directly rendered within a parent component, receiving `params` as props.\n\n3.  **External dependencies and tools used:**\n\n    *   `\"use client\"`:  Indicates this component is rendered on the client-side.\n    *   React (JSX syntax)\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   None explicitly, but it's designed to be used within a larger application.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   Uses a standard HTML `<button>` element.\n    *   Applies CSS classes, including \"btn\" (likely from DaisyUI or a similar CSS framework).\n\n6.  **What props or state does it manage?**\n\n    *   Props:\n        *   `params`: An object containing:\n            *   `text`:  The text displayed on the button (string).\n            *   `borderRadius`: The border radius of the button (string).\n    *   State: None."})
CREATE (:File {id: "deletebut_tsx", name: "DeleteBut.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\DeleteBut.tsx", type: "app-component", description: "This code defines a reusable button component that displays text and allows for customization of its appearance, specifically its text, border radius, color, and padding.\n\n2.  **Functions/Components:**\n\n    *   `DeleteBut`:\n        *   Parameters: `params: { text: string; borderRadius: string; }` (from `ButtonProps` interface)\n        *   Return Value: JSX (a button element)\n        *   Called: By a parent component that passes the `params` prop.\n\n3.  **External dependencies and tools used:**\n    *   React (JSX syntax)\n\n4.  **Related functions, components, or APIs it interacts with:**\n    *   None explicitly, but it's designed to be used within a larger application.\n\n5.  **What UI elements or Daisy UI components does it use?**\n    *   `<button>` HTML element\n    *   DaisyUI classes: `btn btn-outline`\n\n6.  **What props or state does it manage?**\n    *   Props: `params` (object containing `text` and `borderRadius` strings)\n    *   State: None"})
CREATE (:File {id: "guidebut_tsx", name: "GuideBut.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\GuideBut.tsx", type: "app-component", description: "This code defines a reusable button component with customizable text, border radius, and click behavior. It also includes responsive styling to adjust the font size and padding based on screen size.\n\n2.  **Functions/Components:**\n\n    *   `GuideButton`:\n        *   Parameters:\n            *   `params`: `{ text: string; borderRadius: string; }`\n            *   `onClick`: `() => void`\n        *   Return Value: JSX (React component)\n        *   Called: Rendered by a parent component.\n\n3.  **External dependencies and tools used:**\n\n    *   `\"use client\"`: Indicates this component is intended for client-side rendering.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `onClick`:  A callback function passed as a prop, triggered when the button is clicked.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   Uses a standard HTML `<button>` element.\n    *   It does *not* use any DaisyUI components directly.\n\n6.  **What props or state does it manage?**\n\n    *   Props:\n        *   `params`: An object containing `text` (button's text) and `borderRadius` (button's border radius).\n        *   `onClick`: A function to be executed on button click.\n    *   State:  This component does not manage any internal state."})
CREATE (:File {id: "login_tsx", name: "Login.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\Login.tsx", type: "app-component", description: "This code defines a functional React component named `Login` that displays a username within a styled card.\n\n2.  **Functions/Components:**\n\n    *   `Login`:\n        *   Parameters: `username: string` (from `CardProps`)\n        *   Return Value: JSX (a `div` containing a styled card with the username)\n        *   Called: Directly rendered in a parent component (likely).\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: Used for creating React components.\n    *   `\"client\"`: Indicates this component is rendered on the client-side.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   None explicitly, but it's designed to be used within a larger application.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   Uses basic HTML elements (`div`, `h2`) and applies custom styling.\n    *   No Daisy UI components are used.\n\n6.  **What props or state does it manage?**\n\n    *   Props: `username: string` (passed from a parent component).\n    *   State: None."})
CREATE (:File {id: "modal_tsx", name: "Modal.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\Modal.tsx", type: "app-component", description: "This code defines a reusable modal component that displays a message. It uses DaisyUI for styling and provides a close button.\n\n2.  **Functions/Components:**\n\n    *   `Modal`:\n        *   Parameters:\n            *   `id`: `string` (required, used as the dialog's ID)\n            *   `message`: `string` (required, the message to display in the modal)\n        *   Return Value: JSX (React component)\n        *   Called: Rendered by a parent component.\n\n3.  **External dependencies and tools used:**\n\n    *   DaisyUI (CSS framework)\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   This component is self-contained and doesn't directly interact with other components or APIs within the provided code. It's designed to be triggered and controlled by a parent component using the `id` prop.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `<dialog>` (HTML element, styled by DaisyUI)\n    *   `modal-box` (DaisyUI class)\n    *   `modal-action` (DaisyUI class)\n    *   `btn` (DaisyUI class)\n    *   `form` (HTML element)\n    *   `button` (HTML element)\n\n6.  **What props or state does it manage?**\n\n    *   Props: `id` and `message` are received as props.\n    *   State: This component does not manage any internal state."})
CREATE (:File {id: "navbar_tsx", name: "Navbar.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\Navbar.tsx", type: "app-component", description: "This code defines a responsive navigation bar component for a web application. It displays user information, provides links to different sections of the application, and handles user actions like logging out.\n\n2.  **Functions/Components:**\n\n    *   `Navbar`:\n        *   Parameters: `currentPath: string` (determines the active route)\n        *   Return Value: React component (JSX)\n        *   Called: By the application's layout or parent component.\n    *   `toggleSection`:\n        *   Parameters: `section: SectionKey` (string literal type representing the section to toggle)\n        *   Return Value: `void` (updates state)\n        *   Called: When a section header button is clicked.\n    *   `getCurrentPath`:\n        *   Parameters: None\n        *   Return Value: `string` (currentPath prop)\n        *   Called: Inside the component to determine the current path.\n    *   `getInitials`:\n        *   Parameters: `name: string` (user's name)\n        *   Return Value: `string` (initials of the name, or \"AN\" if empty)\n        *   Called: To generate the initials for the user's profile picture.\n    *   `getBackgroundColor`:\n        *   Parameters: `name: string` (user's name)\n        *   Return Value: `string` (hex color code based on the first letter of the name)\n        *   Called: To determine the background color of the user's profile picture.\n    *   `fetchUsername` (inside `useEffect`):\n        *   Parameters: None\n        *   Return Value: `Promise<void>` (fetches username from the server)\n        *   Called: Inside `useEffect` on component mount and when `currentPath` changes.\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: For building the UI.\n    *   `lucide-react`: For icons (e.g., `GraduationCap`, `Menu`, `X`).\n    *   `axios`: For making HTTP requests (fetching username).\n    *   `../middlewares/logout`:  A module containing the `handleLogout` function.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `handleLogout`: From `../middlewares/logout`. Called on logout button click.\n    *   `/api/getUsername`: API endpoint to fetch the username (using `axios.post`).\n    *   `window.location.href`: Used to navigate to different routes within the application.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `button`: Used for navigation links and section toggles.\n    *   `nav`:  The main navigation container.\n    *   `div`: For layout and grouping elements.\n    *   `span`: For text elements.\n    *   Uses Tailwind CSS classes for styling (e.g., `fixed`, `bg-[#16181c]`, `flex`, `items-center`, `space-x-2`, `hover:bg-[#1ea1f2]`).\n    *   Uses `lucide-react` icons.\n\n6.  **What props or state does it manage?**\n\n    *   `NavbarProps`:\n        *   `currentPath: string`:  The current route of the application, used to highlight the active navigation item and manage section visibility.\n    *   State:\n        *   `isMobileMenuOpen: boolean`:  Controls the visibility of the mobile menu.\n        *   `openSections: { academic: boolean, general: boolean, userActions: boolean }`:  Manages the open/closed state of the navigation sections.\n        *   `username: string`: Stores the user's username fetched from the server."})
CREATE (:File {id: "navbarwrapper_tsx", name: "NavbarWrapper.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\NavbarWrapper.tsx", type: "app-component", description: "This component conditionally renders a `Navbar` component based on the current route. It hides the navbar on specific pages defined in `hideNavbarPages`.\n\n2.  **Functions/Components:**\n\n    *   `NavbarWrapper`:\n        *   Parameters: None\n        *   Return Value: JSX (either `null` or a `<Navbar>` component)\n        *   Called: By the application's routing system.\n\n3.  **External dependencies and tools used:**\n\n    *   `next/navigation`: `usePathname` hook for accessing the current route.\n    *   `./Navbar`: A custom `Navbar` component.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `usePathname()`: From `next/navigation`, retrieves the current path.\n    *   `Navbar`: A custom component that is rendered if the navbar is not hidden.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `Navbar`: A custom component, likely containing UI elements for the navigation bar.\n\n6.  **What props or state does it manage?**\n\n    *   `pathname`: State managed by `usePathname` representing the current route.\n    *   `currentPath`: Prop passed to the `Navbar` component, containing the current route."})
CREATE (:File {id: "rating_tsx", name: "Rating.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\Rating.tsx", type: "app-component", description: "This code renders a star rating component with 7 stars, allowing users to select a rating. It uses radio buttons styled as stars and dynamically adjusts the size and spacing based on screen size.\n\n2.  **Functions/Components:**\n\n    *   `Rating`:\n        *   Parameters:\n            *   `num`: `number` - The current rating value (0-7).\n            *   `setNum`: `(value: number) => void` - A function to update the rating value.\n        *   Return Value: JSX (React component)\n        *   Called: Rendered in a parent component.\n    *   `handleRating`:\n        *   Parameters:\n            *   `value`: `number` - The rating value selected by the user.\n        *   Return Value: `void`\n        *   Called: Inside the `onChange` event handler of each star input.\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: For building the UI.\n    *   `\"client\"`: React directive for client-side rendering.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   The `setNum` prop is a callback function that likely updates state in a parent component.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `div`: Used for layout and styling.\n    *   `input`: Radio buttons styled as stars using DaisyUI classes.\n    *   DaisyUI classes: `rating`, `rating-lg`, `rating-hidden`, `mask`, `mask-star-2`.\n\n6.  **What props or state does it manage?**\n\n    *   Props: `num` (current rating), `setNum` (function to update the rating).\n    *   State: This component itself doesn't manage state, but it relies on the `setNum` prop to update state in a parent component."})
CREATE (:File {id: "ratingstatic_tsx", name: "RatingStatic.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\RatingStatic.tsx", type: "app-component", description: "This component displays a static, read-only star rating based on a provided number. It renders a set of stars, highlighting the number of stars corresponding to the input value.\n\n2.  **Functions/Components:**\n\n    *   `RatingStatic`:\n        *   Parameters: `{ num: number; id: string }`\n        *   Return Value: JSX (a `div` containing star inputs)\n        *   Called: Directly used in other components.\n\n3.  **External dependencies and tools used:**\n\n    *   `'use client'` (directive for client-side rendering)\n    *   JSX (for UI structure)\n    *   Array.from (to generate the stars)\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   None explicitly, but it's designed to be used as a display component.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `div` (HTML element)\n    *   `input` (HTML element, type: \"radio\")\n    *   DaisyUI classes: `rating`, `rating-lg`, `mask`, `mask-star-2`, `bg-[#1ea1f2]`\n\n6.  **What props or state does it manage?**\n\n    *   Props: `num` (the rating value, number), `id` (a string for the rating group)\n    *   State: None"})
CREATE (:Endpoint {id: "endpoint_value", name: "value", description: "**"})
CREATE (:File {id: "reportcomp_tsx", name: "ReportComp.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\ReportComp.tsx", type: "app-component", description: "This component displays a \"Report\" option triggered by a triple-dot icon. Clicking the icon reveals a dropdown menu with a \"Report\" option, which calls a function passed as a prop.\n\n2.  **Functions/Components:**\n\n    *   `PostTrippleDot`:\n        *   Parameters:\n            *   `isAI`: `string` - Determines the right margin of the triple-dot icon.\n            *   `handleonClickTrippleDots`: `() => void` - A function to be called when the \"Report\" option is clicked.\n        *   Return Value: JSX (React component)\n        *   Called: Rendered by a parent component.\n\n3.  **External dependencies and tools used:**\n\n    *   None explicitly imported, but uses DaisyUI for styling.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `handleonClickTrippleDots`: This function is passed as a prop and is called when the \"Report\" option is clicked.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `div` elements for layout and styling.\n    *   `span` element for the triple-dot icon (&#8942;).\n    *   DaisyUI components: `dropdown`, `btn`, `menu`.\n    *   `svg` element for the report icon.\n    *   `a` element for the report link.\n\n6.  **What props or state does it manage?**\n\n    *   Props: `isAI` (string), `handleonClickTrippleDots` (function).\n    *   State: None."})
CREATE (:File {id: "searchbar_tsx", name: "SearchBar.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\SearchBar.tsx", type: "app-component", description: "This code defines a reusable search bar component with an input field, a search icon, and a dropdown for displaying search suggestions.\n\n2.  **Functions/Components:**\n\n    *   `SearchBar`:\n        *   Parameters: `props: SearchBarProps` (where `SearchBarProps` is an interface with a `placeholder: string` property)\n        *   Return value: JSX (React component)\n        *   Called: Rendered by a parent component.\n    *   `handleInputChange`:\n        *   Parameters: `e: React.ChangeEvent<HTMLInputElement>`\n        *   Return value: `void`\n        *   Called: When the input field's value changes.\n    *   `handleSearchClick`:\n        *   Parameters: None\n        *   Return value: `void`\n        *   Called: When the search icon is clicked.\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: For building the UI.\n    *   `useState`: React hook for managing component state.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Potentially interacts with an API to fetch search suggestions (currently simulated).\n    *   The `onClick` event handler on the search icon could trigger a search action in a parent component.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `input`: HTML input element.\n    *   `label`: HTML label element.\n    *   `svg`: HTML SVG element (for the search icon).\n    *   `ul`, `li`: HTML list elements for displaying suggestions.\n    *   DaisyUI `input` component with `input-bordered` class.\n\n6.  **What props or state does it manage?**\n\n    *   Props:\n        *   `placeholder`: String for the input placeholder text.\n    *   State:\n        *   `searchText`: String, stores the current value of the input field.\n        *   `suggestions`: Array of strings, stores the search suggestions.\n        *   `showSuggestions`: Boolean, controls the visibility of the suggestions dropdown."})
CREATE (:Endpoint {id: "endpoint_element", name: "element", description: "HTML input element HTML input element for the search field Standard HTML input element for the search field"})
CREATE (:Endpoint {id: "endpoint_placeholder", name: "placeholder", description: "*   `searchText`: String, stores the current value of the input field string` - The current text in the search input"})
CREATE (:File {id: "searchbararr_tsx", name: "SearchBarArr.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\SearchBarArr.tsx", type: "app-component", description: "This code implements a search bar component with a text input field, a search icon, and a dropdown list of suggestions. It allows users to type in a search query and displays relevant suggestions based on the input.\n\n2.  **Functions/Components:**\n\n    *   `SearchBarArr`:\n        *   Parameters: `placeholder: string` (from `SearchBarProps`)\n        *   Return Value: JSX (React component)\n        *   Called: Rendered in the application.\n    *   `handleInputChange`:\n        *   Parameters: `e: React.ChangeEvent<HTMLInputElement>`\n        *   Return Value: `void`\n        *   Called: When the input field's value changes (`onChange` event).\n    *   `handleSearchClick`:\n        *   Parameters: None\n        *   Return Value: `void`\n        *   Called: When the search icon is clicked (`onClick` event).\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: For creating React components and managing state.\n    *   `useState`: React hook for managing component state.\n    *   `'use client'`: Marks the file as a client component.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Potentially interacts with an API to fetch search suggestions (currently simulated).\n    *   Uses the `setSearchText`, `setSuggestions`, and `setShowSuggestions` state update functions.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `input`: HTML input element for the search field.\n    *   `svg`: For the search and arrow icons.\n    *   `label`: For the input field and icons.\n    *   `ul`, `li`: For the suggestions dropdown.\n    *   Daisy UI's `input` and `label` classes are used for styling.\n\n6.  **What props or state does it manage?**\n\n    *   `placeholder` (prop): The placeholder text for the input field.\n    *   `searchText` (state): The current value of the input field.\n    *   `suggestions` (state): An array of strings representing the search suggestions.\n    *   `showSuggestions` (state): A boolean indicating whether to show the suggestions dropdown."})
CREATE (:File {id: "searchbararr2_tsx", name: "SearchBarArr2.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\SearchBarArr2.tsx", type: "app-component", description: "This code implements a search bar component with autocomplete suggestions. It allows users to type in a search query, displays a dropdown of suggested search terms based on fetched data, and triggers a search action when the user presses Enter or clicks the search icon.\n\n2.  **Functions/Components:**\n\n    *   `SearchBarArr2(props: SearchBarProps): JSX.Element`\n        *   Parameters:\n            *   `placeholder: string` - Placeholder text for the input field.\n            *   `searchText: string` - The current text in the search input.\n            *   `onClick: () => void` - Callback function to execute when a search is triggered.\n            *   `setSearchText: (value: string) => void` - Callback function to update the search text state in the parent component.\n        *   Return Value: JSX.Element (React component)\n        *   Called: Rendered by a parent component.\n    *   `handleInputChange(e: React.ChangeEvent<HTMLInputElement>): Promise<void>`\n        *   Parameters: `e: React.ChangeEvent<HTMLInputElement>` - Input change event.\n        *   Return Value: `Promise<void>`\n        *   Called: When the input field's value changes.\n    *   `handleKeyPress(event: React.KeyboardEvent<HTMLInputElement>): void`\n        *   Parameters: `event: React.KeyboardEvent<HTMLInputElement>` - Key press event.\n        *   Return Value: `void`\n        *   Called: When a key is pressed within the input field.\n    *   `handleSearchClick(): void`\n        *   Parameters: None\n        *   Return Value: `void`\n        *   Called: When the search icon is clicked.\n\n3.  **External dependencies and tools used:**\n\n    *   `axios`: For making HTTP requests to fetch data from the `/api/allposts` endpoint.\n    *   `react`: Core library for building the UI.\n    *   `console`: Used for logging.\n    *   `useState`: React hook for managing component state.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/allposts` API endpoint: Fetches an array of `Post` objects.\n    *   `onClick` and `setSearchText` props: These are callbacks provided by the parent component, allowing the search bar to communicate with and update the parent's state and trigger search actions.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `<input>`: Standard HTML input element for the search field.\n    *   `<svg>`: Used for the search icon.\n    *   `<ul>`, `<li>`: Used to display the suggestion list.\n    *   `label`: Used to wrap the input and icon.\n    *   DaisyUI components:\n        *   `input input-bordered flex items-center gap-2`: Used for styling the search bar.\n\n6.  **What props or state does it manage?**\n\n    *   **Props:**\n        *   `placeholder`: Text for the input placeholder.\n        *   `searchText`: The current search text.\n        *   `onClick`: Function to call on search.\n        *   `setSearchText`: Function to update the search text.\n    *   **State:**\n        *   `suggestions`: An array of strings representing the search suggestions.\n        *   `showSuggestions`: A boolean indicating whether to show the suggestions dropdown."})
CREATE (:Endpoint {id: "endpoint_change", name: "change", description: "`Promise<void>` `void` *   Parameters: `tag: string`"})
CREATE (:Endpoint {id: "endpoint_input-bordered", name: "input-bordered", description: "Used for styling the search bar"})
CREATE (:File {id: "textboxai_tsx", name: "textBoxAI.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\components\\textBoxAI.tsx", type: "app-component", description: "This code defines a reusable text input component with an animated placeholder and auto-resizing functionality. It also includes a send button that is disabled when the component is disabled.\n\n2.  **Functions/Components:**\n\n    *   `TextBox`:\n        *   Parameters:\n            *   `searchText`: `string` - The current text in the input.\n            *   `onClick`: `() => void` - Callback function to execute when the send button is clicked.\n            *   `setSearchText`: `(value: string) => void` - Function to update the `searchText` state.\n            *   `disabled`: `boolean` - Whether the input and send button are disabled.\n        *   Return Value: JSX.Element (React component)\n        *   Called: Rendered in the application.\n    *   `animatePlaceholder`:\n        *   Parameters: None\n        *   Return Value: None\n        *   Called: Inside `useEffect`\n    *   `handleInputChange`:\n        *   Parameters:\n            *   `e`: `ChangeEvent<HTMLTextAreaElement>` - The change event from the textarea.\n        *   Return Value: `void`\n        *   Called: When the text in the textarea changes.\n    *   `handleKeyDown`:\n        *   Parameters:\n            *   `e`: `KeyboardEvent<HTMLTextAreaElement>` - The keydown event from the textarea.\n        *   Return Value: `void`\n        *   Called: When a key is pressed in the textarea.\n    *   `adjustHeight`:\n        *   Parameters:\n            *   `textarea`: `HTMLTextAreaElement` - The textarea element.\n        *   Return Value: `void`\n        *   Called: Inside `handleInputChange` and `handleKeyDown`.\n    *   `scrollToBottom`:\n        *   Parameters: None\n        *   Return Value: `void`\n        *   Called: Inside `handleKeyDown`.\n\n3.  **External dependencies and tools used:**\n\n    *   `react`: Core React library for building UI components.\n    *   `useState`: React hook for managing component state.\n    *   `useRef`: React hook for creating mutable references to DOM elements.\n    *   `useEffect`: React hook for performing side effects (e.g., setting up animations).\n    *   `ChangeEvent`: TypeScript type for input change events.\n    *   `KeyboardEvent`: TypeScript type for keyboard events.\n    *   `NodeJS.Timeout`: TypeScript type for timeout IDs.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Interacts with the `onClick` and `setSearchText` props, which are likely defined in a parent component.\n    *   Uses `setTimeout` and `clearTimeout` for the placeholder animation.\n    *   Uses the DOM API to adjust the textarea's height and scroll position.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   `textarea`: HTML textarea element for text input.\n    *   `button`: HTML button element for the send button.\n    *   `svg`: Inline SVG elements for the send button icon.\n    *   Uses inline styles for layout and appearance.\n\n6.  **What props or state does it manage?**\n\n    *   Props:\n        *   `searchText`: The text entered in the input.\n        *   `onClick`: Function to handle the send button click.\n        *   `setSearchText`: Function to update the `searchText` prop.\n        *   `disabled`: Boolean to disable the input and button.\n    *   State:\n        *   `placeholder`: The animated placeholder text.\n        *   `phraseIndex`: Index of the current phrase in the `phrases` array.\n        *   `charIndex`: Index of the current character being displayed in the placeholder.\n        *   `typingForward`: Boolean indicating whether the placeholder is typing forward or erasing."})
CREATE (:Endpoint {id: "endpoint_component", name: "component", description: "**"})
CREATE (:Endpoint {id: "endpoint_type", name: "type", description: "**"})
CREATE (:Endpoint {id: "endpoint_validation", name: "validation", description: "**"})
CREATE (:Endpoint {id: "endpoint_page", name: "page", description: "**"})
CREATE (:File {id: "layout_tsx", name: "layout.tsx", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\layout.tsx", type: "layout", description: "This code defines the root layout component for a Next.js application. It sets up the basic HTML structure, includes global styles, integrates analytics and performance monitoring, and renders a navigation bar and the page content.\n\n2.  **Functions/Components:**\n\n    *   `RootLayout`:\n        *   Parameters: `{ children: React.ReactNode; }`\n        *   Return Value: JSX (HTML structure)\n        *   Called: By Next.js during page rendering.\n    *   `geistSans`:\n        *   Parameters: `{ variable: string; subsets: string[]; }`\n        *   Return Value: Font object\n        *   Called: During component initialization.\n    *   `geistMono`:\n        *   Parameters: `{ variable: string; subsets: string[]; }`\n        *   Return Value: Font object\n        *   Called: During component initialization.\n\n3.  **External dependencies and tools used:**\n\n    *   `next`: Core Next.js framework.\n    *   `@vercel/analytics/react`: Vercel Analytics for tracking user behavior.\n    *   `@vercel/speed-insights/next`: Vercel Speed Insights for performance monitoring.\n    *   `next/font/google`: For importing Google Fonts.\n    *   `./globals.css`:  Imports global CSS styles.\n    *   `./components/NavbarWrapper`: Imports the Navbar component.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `NavbarWrapper`:  A custom component used for the navigation bar.\n    *   `children`:  Represents the content of the individual pages rendered within the layout.\n    *   `Metadata`:  Next.js API for setting page metadata (title, description).\n    *   `Analytics`: Vercel Analytics component.\n    *   `SpeedInsights`: Vercel Speed Insights component."})
CREATE (:Endpoint {id: "endpoint_fields", name: "fields", description: "*   Parameters: None"})
CREATE (:File {id: "allratedcourses_ts", name: "allratedcourses.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\middlewares\\allratedcourses.ts", type: "app-component", description: "This code retrieves all `RateCard` documents from a database, extracts unique course categories and codes, and returns them as an array of objects.\n\n2.  **Functions/Components:**\n\n    *   `allratedcourses()`:\n        *   Parameters: None\n        *   Return Value: `Promise<{ courseCategory: string; courseCode: string }[]>` (an array of objects containing unique course category and code pairs) or throws an error.\n        *   Called: Likely called from a component or API route to fetch unique course data.\n\n3.  **External dependencies and tools used:**\n\n    *   `RateCard`: A model (likely from a database interaction library like Mongoose) representing rate card data.\n    *   `mongoose` (commented out):  Implies potential use of Mongoose for database interaction, but it's not currently used.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `RateCard.find()`:  This is a database query (likely using Mongoose) to retrieve all `RateCard` documents.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   None. This code is a data fetching function and doesn't directly interact with UI elements.\n\n6.  **What props or state does it manage?**\n\n    *   None. This function doesn't manage any props or state. It's a data retrieval function."})
CREATE (:File {id: "averaterating_ts", name: "averateRating.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\middlewares\\averateRating.ts", type: "app-component", description: "This code calculates and retrieves average ratings and related statistics for courses based on data stored in a database, and also calculates the same statistics for each professor teaching the course.\n\n2.  **Functions/Components:**\n\n    *   `getMostFrequentValue(arr: number[]): number`:\n        *   **Parameters:** `arr`: An array of numbers.\n        *   **Return Value:** The number that appears most frequently in the array.\n        *   **Called by:** `getAverageRating`, `getAverageRatingByProf`.\n\n    *   `getMostFrequentStringValue(arr: string[]): string`:\n        *   **Parameters:** `arr`: An array of strings.\n        *   **Return Value:** The string that appears most frequently in the array.\n        *   **Called by:** `getAverageRating`, `getAverageRatingByProf`.\n\n    *   `getAverageRating({ courseCategory: string, courseCode: string }): Promise<{...} | null>`:\n        *   **Parameters:**\n            *   `courseCategory`: The category of the course (string).\n            *   `courseCode`: The code of the course (string).\n        *   **Return Value:** A Promise that resolves to an object containing average rating statistics or `null` if no data is found or an error occurs.\n        *   **Called by:** Not directly called within this file, but likely called by an API route or other component.\n\n    *   `getAverageRatingByProf({ courseCategory: string, courseCode: string }): Promise<Array<{...}> | null>`:\n        *   **Parameters:**\n            *   `courseCategory`: The category of the course (string).\n            *   `courseCode`: The code of the course (string).\n        *   **Return Value:** A Promise that resolves to an array of objects, each containing average rating statistics for a professor, or `null` if no data is found or an error occurs.\n        *   **Called by:** Not directly called within this file, but likely called by an API route or other component.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/app/models/rateCard`:  Likely a Mongoose model representing the structure of a rate card document in the database.\n    *   `@/libs/mongodb`:  A module to connect to a MongoDB database.\n    *   `mongoose`: Used to interact with the database.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Interacts with a MongoDB database through the `RateCard` model.\n    *   Likely interacts with API routes or other components that call `getAverageRating` and `getAverageRatingByProf` to retrieve and display the calculated statistics.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This file does not directly use any UI elements or Daisy UI components. It's a backend logic file.\n\n6.  **What props or state does it manage?**\n\n    *   This file does not manage any props or state directly. It's a utility file that calculates data."})
CREATE (:File {id: "convertdate_ts", name: "convertDate.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\middlewares\\convertDate.ts", type: "app-component", description: "This code defines a function `convertDate` that converts a date string or Date object (assumed to be in UTC) to a date string formatted as \"dd/mm/yy\" in the Asia/Kolkata timezone (IST).\n\n2.  **Functions/Components:**\n\n    *   `convertDate(createdAt: string | Date): string`\n        *   Parameters: `createdAt` (string | Date) - The date to convert, can be a string in a format like ISO or a Date object.\n        *   Return Value: `string` - The formatted date string in \"dd/mm/yy\" format.\n        *   Called: Directly by any code importing and calling the function.\n\n3.  **External dependencies and tools used:**\n\n    *   `Intl.DateTimeFormatOptions`: Used for formatting the date.\n    *   `Date`: JavaScript's built-in Date object.\n\n4.  **Related functions, components, or APIs it interacts with:**\n    *   `toLocaleDateString()`:  A method of the Date object used for formatting the date according to the specified locale and options.\n\n5.  **What UI elements or Daisy UI components does it use?**\n    *   None. This is a utility function and doesn't directly interact with UI elements.\n\n6.  **What props or state does it manage?**\n    *   None. This function doesn't manage any props or state."})
CREATE (:File {id: "logout_ts", name: "logout.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\middlewares\\logout.ts", type: "app-component", description: "This code defines an asynchronous function `handleLogout` that handles the user logout process by sending a DELETE request to a logout API endpoint and redirecting the user to the login/signup page upon successful logout.\n\n2.  **Functions/Components:**\n\n    *   `handleLogout()`:\n        *   Parameters: None\n        *   Return Value: `Promise<void>` (implicitly)\n        *   Called: When a logout action is triggered (likely by a button click or similar user interaction).\n\n3.  **External dependencies and tools used:**\n\n    *   `fetch`: Used for making HTTP requests to the backend API.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `/api/auth/logout`: Backend API endpoint responsible for handling the logout process.\n    *   `/loginSignup`: The URL to redirect the user to after successful logout.\n    *   `window.location.href`: Used to redirect the user to a different page.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This code itself doesn't directly use any UI elements or Daisy UI components. It's a function that's likely triggered by a UI element (e.g., a button).\n\n6.  **What props or state does it manage?**\n\n    *   This code doesn't manage any props or state directly. It interacts with the browser's `window.location` to redirect the user."})
CREATE (:File {id: "uploadimage_ts", name: "uploadimage.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\middlewares\\uploadimage.ts", type: "app-component", description: "This code defines an asynchronous function `uploadImage` that uploads an image (provided as a Buffer) to Cloudinary and returns the secure URL of the uploaded image. It configures Cloudinary using environment variables.\n\n2.  **Functions/Components:**\n\n    *   `uploadImage(imageBuffer: Buffer): Promise<string>`:\n        *   **Parameters:** `imageBuffer` (Buffer) - The image data in buffer format.\n        *   **Return Value:** `Promise<string>` - A promise that resolves with the secure URL of the uploaded image or rejects with an error.\n        *   **Called:** This function is exported and intended to be called from other parts of the application to upload images.\n\n3.  **External dependencies and tools used:**\n\n    *   `cloudinary`:  A Node.js library for interacting with the Cloudinary API.\n    *   `process.env`:  Used to access environment variables for Cloudinary configuration (cloud name, API key, API secret).\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Cloudinary API: Specifically, `cloudinary.v2.uploader.upload` is used to upload the image.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This file does not directly use any UI elements or Daisy UI components. It's a utility function for image uploading, which would likely be used by a component that handles image selection and display.\n\n6.  **What props or state does it manage?**\n\n    *   This file does not manage any props or state. It's a utility function."})
CREATE (:File {id: "verifytoken_ts", name: "verifyToken.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\middlewares\\verifyToken.ts", type: "app-component", description: "This code verifies a JSON Web Token (JWT) to authenticate users. It decodes the token, retrieves the user from the database, and returns the user data if the token is valid.\n\n2.  **Functions/Components:**\n\n    *   `verifyToken(token: string): Promise<any>`:\n        *   **Parameters:** `token: string` (the JWT).\n        *   **Return Value:**  `NextResponse` object with user data (if valid) or an error response (if invalid or missing).\n        *   **Called:**  Exported and likely used in API routes or middleware to protect routes.\n\n3.  **External dependencies and tools used:**\n\n    *   `jsonwebtoken`:  Used for JWT verification (`jwt.verify`).\n    *   `next/server`: Used for creating and returning `NextResponse` objects.\n    *   `../models/user`:  Imports a `User` model (likely from a database schema).\n    *   `process.env.JWT_SECRET`:  Accesses the JWT secret key from environment variables.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `User.findById(decoded.userId).select('-password')`:  Interacts with a database (likely MongoDB) to find a user by ID and excludes the password field.\n    *   Likely used within Next.js API routes or middleware to protect routes.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This file does not use any UI elements or Daisy UI components. It's a backend utility function.\n\n6.  **What props or state does it manage?**\n\n    *   This file does not manage any props or state. It's a utility function that processes data and returns a response."})
CREATE (:File {id: "averageratecard_ts", name: "averageRateCard.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\models\\averageRateCard.ts", type: "app-component", description: "This code defines a Mongoose schema and model for an \"AverageRateCard\" document, representing course rating information. It specifies the structure and validation rules for data related to course ratings, including course details, professor information, and rating metrics.\n\n2.  **Functions/Components:**\n\n    *   `AverageRateCard`: (Mongoose Model)\n        *   Parameters: None (Uses the `averageRateCardSchema`)\n        *   Return Value: Mongoose Model instance.\n        *   Called: When interacting with the database to create, read, update, or delete \"AverageRateCard\" documents.\n\n3.  **External dependencies and tools used:**\n\n    *   `mongoose`:  A MongoDB object modeling tool designed to work in an asynchronous environment.\n    *   `Schema`: From mongoose, used to define the structure of the data.\n    *   `Document`: From mongoose, used to define the type of the document.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   MongoDB database (via Mongoose).\n    *   Potentially other parts of the application that interact with the database to store, retrieve, and manage average rate card data.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This file defines a data model and does not contain any UI elements or Daisy UI components.\n\n6.  **What props or state does it manage?**\n\n    *   This file defines a data model and does not manage any props or state. It defines the structure of data that might be used by other components."})
CREATE (:File {id: "generalpost_ts", name: "generalpost.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\models\\generalpost.ts", type: "app-component", description: "This code defines a Mongoose schema and model for a \"GeneralPost\" document, representing a generic post with fields like username, title, content, and images. It sets up the structure for storing and interacting with these posts in a MongoDB database.\n\n2.  **Functions/Components:**\n\n    *   `GeneralPost` (Mongoose Model):\n        *   Parameters: None (implicitly uses the schema)\n        *   Return Value: Mongoose Model instance\n        *   Called: When interacting with the database to create, read, update, or delete general posts.\n\n3.  **External dependencies and tools used:**\n\n    *   `mongoose`:  A MongoDB object modeling tool designed to work in an asynchronous environment.\n    *   `Schema`:  From `mongoose`, used to define the structure of the document.\n    *   `Document`: From `mongoose`, represents a document in the database.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `User` (assumed): The `username` field references a `User` model, implying interaction with a user-related component or API.\n    *   MongoDB: The code interacts with a MongoDB database through Mongoose.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This file does not directly use any UI elements or Daisy UI components. It defines the data structure for posts, which would be used by other components to display and manage the posts.\n\n6.  **What props or state does it manage?**\n\n    *   This file does not manage any props or state directly. It defines the schema for the data that would be stored and retrieved, which would be managed by other components."})
CREATE (:Endpoint {id: "endpoint_general", name: "general", description: "**"})
CREATE (:File {id: "post_ts", name: "post.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\models\\post.ts", type: "app-component", description: "This code defines a Mongoose schema and model for a \"Post\" object, representing data likely related to course content or user posts. It sets up the structure for storing post information in a MongoDB database.\n\n2.  **Functions/Components:**\n\n    *   `Post` (Model):\n        *   Parameters: None (implicitly uses the `postSchema`)\n        *   Return Value: A Mongoose model for interacting with the \"Post\" collection.\n        *   Called: When interacting with the database to create, read, update, or delete post documents.\n\n3.  **External dependencies and tools used:**\n\n    *   `mongoose`:  A MongoDB object modeling tool designed to work in an asynchronous environment.\n    *   `Schema`: From mongoose, used to define the structure of the data.\n    *   `Document`: From mongoose, used to define the structure of the data.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Likely interacts with a MongoDB database through Mongoose.\n    *   Potentially interacts with a \"User\" model (referenced by `username`).\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This file does not contain any UI elements or Daisy UI components. It's a backend data model.\n\n6.  **What props or state does it manage?**\n\n    *   This file does not manage any props or state. It defines the structure of data to be stored in a database."})
CREATE (:Endpoint {id: "endpoint_information", name: "information", description: "**"})
CREATE (:Endpoint {id: "endpoint_post", name: "post", description: "**"})
CREATE (:File {id: "prof_ts", name: "prof.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\models\\prof.ts", type: "app-component", description: "This code defines a Mongoose schema and model for a \"Department\" entity, representing a department with a name and a list of professors. It allows for creating, retrieving, and manipulating department data within a MongoDB database.\n\n2.  **Functions/Components:**\n\n    *   **`IDepartment`**: Interface defining the structure of a department object.\n        *   Parameters: `departmentName: string`, `professors: string[]`\n        *   Return Value: None (Interface definition)\n        *   Called: Used to define the schema.\n    *   **`DepartmentSchema`**: Mongoose Schema for the Department model.\n        *   Parameters: None (Schema definition)\n        *   Return Value: None (Schema definition)\n        *   Called: Used to create the `Department` model.\n    *   **`Department`**: Mongoose Model for interacting with the 'Department' collection.\n        *   Parameters: None (Model definition)\n        *   Return Value: None (Model definition)\n        *   Called: Exported for use in other parts of the application to interact with the database.\n\n3.  **External dependencies and tools used:**\n\n    *   `mongoose`:  A MongoDB object modeling tool designed to work in an asynchronous environment.\n    *   `Schema` (from mongoose): Used to define the structure of the data stored in MongoDB.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Interacts with a MongoDB database through the `mongoose` library.\n    *   Likely used in conjunction with other code that interacts with the database to create, read, update, and delete department data.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This file does not contain any UI elements or Daisy UI components. It's a backend data model.\n\n6.  **What props or state does it manage?**\n\n    *   This file does not manage any props or state. It defines a data model for the backend."})
CREATE (:Endpoint {id: "endpoint_department", name: "department", description: "**"})
CREATE (:File {id: "ratecard_ts", name: "rateCard.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\models\\rateCard.ts", type: "app-component", description: "This code defines a Mongoose schema and model for a \"RateCard\" document, likely used to store course rating information. It specifies the structure and data types for various fields related to course evaluation.\n\n2.  **Functions/Components:**\n\n    *   `RateCard`: (Model)\n        *   Parameters: None (implicitly uses the `rateCardSchema`)\n        *   Return Value: Mongoose Model instance\n        *   Called: When interacting with the database to create, read, update, or delete rate card entries.\n    *   `rateCardSchema`: (Schema)\n        *   Parameters: None\n        *   Return Value: Mongoose Schema instance\n        *   Called: Used to define the structure of the RateCard model.\n\n3.  **External dependencies and tools used:**\n\n    *   `mongoose`:  A MongoDB object modeling tool designed to work in an asynchronous environment.\n    *   `Schema`:  Mongoose Schema type.\n    *   `Document`: Mongoose Document type.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   MongoDB database (through Mongoose).\n    *   Potentially other parts of the application that interact with the `RateCard` model to store and retrieve data.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This file does not contain any UI elements or Daisy UI components. It is a backend data model definition.\n\n6.  **What props or state does it manage?**\n\n    *   This file does not manage any props or state. It defines the structure of the data that will be stored in the database."})
CREATE (:Endpoint {id: "endpoint_rate", name: "rate", description: "(Schema)"})
CREATE (:File {id: "user_ts", name: "user.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\models\\user.ts", type: "app-component", description: "This code defines a Mongoose schema and model for a \"User\" object, representing user data in a MongoDB database. It structures the data with fields for username and password, and exports the model for use in other parts of the application.\n\n2.  **Functions/Components:**\n\n    *   `User` (Mongoose Model):\n        *   Parameters: None (implicitly uses the `userSchema`)\n        *   Return Value: A Mongoose model object.\n        *   Called: When interacting with the database to create, read, update, or delete user data.\n\n3.  **External dependencies and tools used:**\n\n    *   `mongoose`:  A MongoDB object modeling tool designed to work in an asynchronous environment.\n    *   `Schema`: From mongoose, used to define the structure of the user data.\n    *   `Document`: From mongoose, used to define the structure of the user data.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Potentially interacts with database connection setup (not shown in this code snippet).\n    *   Used by other parts of the application (e.g., API routes, authentication logic) to interact with user data in the database.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This file does not use any UI elements or Daisy UI components. It's a backend data model.\n\n6.  **What props or state does it manage?**\n\n    *   This file does not manage any props or state. It defines a data structure."})
CREATE (:Endpoint {id: "endpoint_user", name: "user", description: "**"})
CREATE (:Endpoint {id: "endpoint_changes", name: "changes", description: "*   Parameters: None"})
CREATE (:File {id: "createpost_ts", name: "createpost.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\utils\\createpost.ts", type: "app-component", description: "This code defines an asynchronous function `handleCreatePost` that creates a new post in a MongoDB database. It validates input, connects to the database, creates a new `Post` document, and returns a success or failure response.\n\n2.  **Functions/Components:**\n\n    *   `handleCreatePost(courseCategory: string, courseCode: string, prof: string, content: string): Promise<{ success: boolean, post?: any, error?: string }>`\n        *   **Parameters:**\n            *   `courseCategory`: `string` - The course category.\n            *   `courseCode`: `string` - The course code.\n            *   `prof`: `string` - The professor's name.\n            *   `content`: `string` - The post content.\n        *   **Return Value:** `Promise<{ success: boolean, post?: any, error?: string }>` - A promise that resolves to an object indicating success/failure, the created post (if successful), or an error message.\n        *   **Called:** Directly, likely from a UI event handler.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/app/models/post`:  A module defining the `Post` model (likely using Mongoose or a similar ODM).\n    *   `@/libs/mongodb`: A module providing a function to connect to the MongoDB database.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `Post.create()`:  A method of the `Post` model (likely from Mongoose) to create a new post document in the database.\n    *   `connectToDatabase()`: A function to establish a connection to the MongoDB database.\n\n5.  **What UI elements or Daisy UI components does it use?**\n    *   This file does not contain any UI elements or Daisy UI components. It is a backend function.\n\n6.  **What props or state does it manage?**\n    *   This file does not manage any props or state. It is a backend function."})
CREATE (:Endpoint {id: "endpoint_document", name: "document", description: "**"})
CREATE (:File {id: "filter_ts", name: "filter.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\utils\\filter.ts", type: "app-component", description: "This code defines an asynchronous function `filterRateCards` that filters and retrieves rate card data from a MongoDB database based on provided parameters. It constructs a filter object based on the input parameters and uses it to query the database.\n\n2.  **Functions/Components:**\n\n    *   `filterRateCards(params: FilterRateCardsParams): Promise<any>`\n        *   **Parameters:** `params`: An object of type `FilterRateCardsParams` containing optional filter criteria (courseCategory, courseCode, profName, attendance, gradeAvg, averageRating, courseContent, excludeContent).\n        *   **Return Value:** A Promise that resolves to an array of rate card objects (likely from MongoDB).\n        *   **Called:** This function is exported and intended to be called from other parts of the application to retrieve filtered rate card data.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/libs/mongodb`:  A module to connect to the MongoDB database (likely a custom module).\n    *   `../models/averageRateCard`:  A module defining the schema/model for the \"AverageRateCard\" data in MongoDB.\n    *   MongoDB: The database used to store and retrieve the rate card data.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `connectToDatabase()`:  From `@/libs/mongodb`, used to establish a connection to the MongoDB database.\n    *   `AverageRateCard.find(filter)`:  A MongoDB query using the Mongoose library (likely) to find rate cards matching the constructed `filter`.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This file does not directly interact with UI elements or Daisy UI components. It's a backend function for data retrieval.\n\n6.  **What props or state does it manage?**\n\n    *   This file does not manage props or state directly. It receives filter parameters as input and returns data."})
CREATE (:Endpoint {id: "endpoint_parameters", name: "parameters", description: "**"})
CREATE (:File {id: "search_ts", name: "search.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\app\\utils\\search.ts", type: "app-component", description: "This code defines an asynchronous function `handleCourseSearch` that searches for course-related data based on a provided search query. It interacts with a MongoDB database to retrieve and process course information, including ratings and posts.\n\n2.  **Functions/Components:**\n\n    *   `handleCourseSearch(searchQuery: string): Promise<{ error?: string; rateCard?: any; posts?: any; responses?: any; }>`\n        *   Parameters: `searchQuery` (string) - The search query string.\n        *   Return Value: A Promise that resolves to an object containing either an error message or the search results (rateCard, posts, or responses).\n        *   Called: This function is likely exported and called from another component or API route to handle course searches.\n\n3.  **External dependencies and tools used:**\n\n    *   `@/app/models/post`:  Likely a Mongoose model for course posts.\n    *   `@/app/models/rateCard`: Likely a Mongoose model for course rating cards.\n    *   `@/libs/mongodb`:  A module to connect to a MongoDB database.\n    *   `@/app/middlewares/averateRating`: A function to get average rating by professor.\n    *   `mongoose`:  Used for interacting with MongoDB.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `connectToDatabase()`:  Connects to the MongoDB database.\n    *   `Post.find()`:  Mongoose method to find course posts in the database.\n    *   `RateCard.find()`: Mongoose method to find rating cards in the database.\n    *   `getAverageRatingByProf({courseCategory, courseCode})`: Retrieves average rating by professor.\n\n5.  **What UI elements or Daisy UI components does it use?**\n\n    *   This code is a backend function and does not directly use any UI elements or Daisy UI components.\n\n6.  **What props or state does it manage?**\n\n    *   This code does not manage any props or state directly, as it's a utility function. It processes data and returns results."})
CREATE (:Endpoint {id: "endpoint_average", name: "average", description: "Used for interacting with MongoDB"})
CREATE (:File {id: "generatetokenandsetcookies_ts", name: "generateTokenAndSetCookies.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\libs\\generateTokenAndSetCookies.ts", type: "utility", description: "This utility function generates a JSON Web Token (JWT) for a given user ID and sets it as an HTTP-only cookie in the response.\n\n2.  **Functions/Components:**\n\n    *   `generateTokenAndSetCookie(userId: string): NextResponse`:\n        *   Parameters: `userId` (string) - The user's unique identifier.\n        *   Return Value: `NextResponse` - A Next.js response object containing a success message and the JWT set as a cookie.\n        *   Called: Potentially called from API routes or server-side functions to authenticate users.\n\n3.  **External dependencies and tools used:**\n\n    *   `jsonwebtoken`: Used for creating and signing the JWT.\n    *   `next/server`: Used for creating the `NextResponse` object and setting cookies.\n    *   `process.env`: Accesses environment variables, specifically `JWT_SECRET` and `NODE_ENV`.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   Likely used within Next.js API routes or server-side functions to handle user authentication and authorization.\n    *   Interacts with the `NextResponse` object to set the cookie."})
CREATE (:File {id: "mongodb_ts", name: "mongodb.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\libs\\mongodb.ts", type: "database", description: "This code establishes and manages a connection to a MongoDB database using the Mongoose library. It implements a connection caching mechanism to reuse existing connections.\n\n2.  **Functions/Components:**\n\n    *   `connectToDatabase()`:\n        *   Parameters: None\n        *   Return Value: `Promise<typeof mongoose>` (a promise that resolves to the Mongoose connection object)\n        *   Called: By any part of the application that needs to interact with the database.\n        *   Logic:\n            *   Checks for an existing cached connection (`global._mongooseConnection.conn`). If found, returns it.\n            *   If no connection exists, checks for a pending connection promise (`global._mongooseConnection.promise`). If found, awaits and returns the connection.\n            *   If no connection or promise exists, creates a new Mongoose connection using `mongoose.connect()` with the `MONGODB_URI` environment variable. Caches the connection and returns it.\n\n3.  **External dependencies and tools used:**\n\n    *   `mongoose`:  A MongoDB object modeling tool designed to work in an asynchronous environment.\n    *   `process.env.MONGODB_URI`:  Retrieves the MongoDB connection string from environment variables.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `mongoose.connect()`:  Mongoose API to establish a connection to the MongoDB database.\n    *   `global._mongooseConnection`:  A global variable (or object) used for caching the Mongoose connection."})
CREATE (:File {id: "global_d_ts", name: "global.d.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\types\\global.d.ts", type: "utility", description: "This file declares global types to extend the `globalThis` object, specifically to store a Mongoose connection. This allows the connection to be accessed and reused across different parts of the application.\n\n2.  **Functions/Components:**\n    *   `_mongooseConnection`: (global variable)\n        *   Parameters: None\n        *   Return Value: An object with the following properties:\n            *   `conn`: `typeof mongoose | null` - Represents the Mongoose connection or null if not established.\n            *   `promise`: `Promise<typeof mongoose> | null` - Represents a promise that resolves to the Mongoose connection, or null if not connecting.\n        *   Called: Implicitly accessed and modified throughout the application to manage the Mongoose connection.\n\n3.  **External dependencies and tools used:**\n    *   `mongoose`: A popular MongoDB object modeling tool.\n\n4.  **Related functions, components, or APIs it interacts with:**\n    *   The `mongoose` library's connection methods (e.g., `mongoose.connect()`, `mongoose.connection`) are likely used elsewhere in the application to establish and manage the database connection, utilizing the globally declared `_mongooseConnection`."})
CREATE (:File {id: "next-pwa_d_ts", name: "next-pwa.d.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\src\\types\\next-pwa.d.ts", type: "types", description: "This code defines TypeScript types for the \"next-pwa\" module, enabling type checking and autocompletion when using the module in a Next.js project. It provides a type definition for the `withPWA` function.\n\n2.  **Functions/Components:**\n\n    *   `withPWA(config: NextConfig): NextConfig`\n        *   Parameters: `config`: `NextConfig` (from \"next\" module), representing the Next.js configuration object.\n        *   Return Value: `NextConfig` (from \"next\" module), the modified Next.js configuration object.\n        *   Called: When integrating next-pwa into a Next.js project, typically in `next.config.js` or `next.config.ts`.\n\n3.  **External dependencies and tools used:**\n\n    *   `next`: Used for the `NextConfig` type.\n    *   TypeScript: Used for type definitions.\n\n4.  **Related functions, components, or APIs it interacts with:**\n\n    *   `NextConfig`: The core configuration object for Next.js applications."})
CREATE (:File {id: "tailwind_config_js", name: "tailwind.config.js", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\tailwind.config.js", type: "styles", description: "This file configures Tailwind CSS for a project, specifying content paths and enabling the daisyUI component library.\n\n2.  **Functions/Components:**\n    *   `module.exports`:  An object that exports the Tailwind CSS configuration.\n        *   `content`: (Array of strings) Specifies the file paths where Tailwind should scan for classes. Returns: None. Called: During the build process.\n        *   `theme`: (Object) Defines or extends the default Tailwind theme.\n            *   `extend`: (Object) Allows extending the default theme without overriding it. Returns: None. Called: During the build process.\n        *   `plugins`: (Array of plugins)  Specifies the Tailwind plugins to use. Returns: None. Called: During the build process.\n\n3.  **External dependencies and tools used:**\n    *   `daisyui`: A component library built on top of Tailwind CSS.\n    *   `tailwindcss`: A utility-first CSS framework.\n\n4.  **Related functions, components, or APIs it interacts with:**\n    *   Tailwind CSS build process.\n    *   Files matching the patterns specified in the `content` array (e.g., `.js`, `.ts`, `.jsx`, `.tsx`, `.css` files within the `src` directory)."})
CREATE (:File {id: "tailwind_config_ts", name: "tailwind.config.ts", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\tailwind.config.ts", type: "styles", description: "This file configures Tailwind CSS for a project, specifying content paths to scan for CSS class usage and extending the default theme with custom colors.\n\n2.  **Functions/Components:**\n    *   **`default`**: (Config) - Returns a configuration object for Tailwind CSS. It's called by the Tailwind CSS build process.\n\n3.  **External dependencies and tools used:**\n    *   `tailwindcss`: A CSS framework.\n    *   `@types/tailwindcss`: TypeScript types for Tailwind CSS.\n\n4.  **Related functions, components, or APIs it interacts with:**\n    *   Tailwind CSS build process."})
CREATE (:File {id: "tsconfig_json", name: "tsconfig.json", path: "C:\\Users\\smhus\\OneDrive\\Desktop\\petprojects\\IITD Forum\\iitdforum\\tsconfig.json", type: "utility", description: "This file configures the TypeScript compiler for a JavaScript project, likely a Next.js application. It specifies how the code should be compiled, what features to enable, and which files to include and exclude.\n\n2.  **Functions/Components:** None are defined within this JSON file. It's a configuration file, not code.\n\n3.  **External dependencies and tools used:**\n    *   TypeScript compiler (`tsc`)\n    *   Next.js framework (implied by the \"plugins\" section and file inclusions)\n    *   Node.js environment (for running the compiler and the application)\n\n4.  **Related functions, components, or APIs it interacts with:**\n    *   The TypeScript compiler uses the settings in this file to compile `.ts` and `.tsx` files.\n    *   Next.js uses this configuration to build and run the application.\n    *   The `paths` setting interacts with the project's module resolution."})
CREATE INDEX ON :File(id)
CREATE INDEX ON :Function(id)
CREATE INDEX ON :Library(id)
CREATE INDEX ON :DataStructure(id)
CREATE INDEX ON :Endpoint(id)
CREATE INDEX ON :Controller(id)
CREATE INDEX ON :Model(id)

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_details"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_text"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_requests"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_request"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_6"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_based"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_text"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_or"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_with"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_creation"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_and"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_created"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_method"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_in"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_data"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_by"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_flagged"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_not"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_id"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_the"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "route_ts" AND b.id = "endpoint_is"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_search"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_for"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_and"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_to"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_objects"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_title"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_content"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "butnotsel_tsx" AND b.id = "endpoint_field"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "card_tsx" AND b.id = "endpoint_button"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "card2_tsx" AND b.id = "endpoint_with"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "card2_tsx" AND b.id = "endpoint_id"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "card2_tsx" AND b.id = "endpoint_is"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "card3_tsx" AND b.id = "endpoint_was"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "card3_tsx" AND b.id = "endpoint_author"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "ratingstatic_tsx" AND b.id = "endpoint_value"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbar_tsx" AND b.id = "endpoint_field"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbar_tsx" AND b.id = "endpoint_element"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbar_tsx" AND b.id = "endpoint_placeholder"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbararr_tsx" AND b.id = "endpoint_field"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbararr_tsx" AND b.id = "endpoint_element"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbararr2_tsx" AND b.id = "endpoint_field"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbararr2_tsx" AND b.id = "endpoint_change"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbararr2_tsx" AND b.id = "endpoint_element"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbararr2_tsx" AND b.id = "endpoint_and"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbararr2_tsx" AND b.id = "endpoint_input-bordered"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "searchbararr2_tsx" AND b.id = "endpoint_placeholder"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "textboxai_tsx" AND b.id = "endpoint_component"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "textboxai_tsx" AND b.id = "endpoint_and"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "textboxai_tsx" AND b.id = "endpoint_change"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_type"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_validation"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_change"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_field"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_data"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_in"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_page"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_fields"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "logout_ts" AND b.id = "endpoint_request"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "generalpost_ts" AND b.id = "endpoint_with"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "generalpost_ts" AND b.id = "endpoint_general"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "post_ts" AND b.id = "endpoint_information"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "post_ts" AND b.id = "endpoint_post"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "prof_ts" AND b.id = "endpoint_department"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "ratecard_ts" AND b.id = "endpoint_rate"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "user_ts" AND b.id = "endpoint_user"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_information"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "page_tsx" AND b.id = "endpoint_changes"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "createpost_ts" AND b.id = "endpoint_in"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "createpost_ts" AND b.id = "endpoint_content"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "createpost_ts" AND b.id = "endpoint_document"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "filter_ts" AND b.id = "endpoint_parameters"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "filter_ts" AND b.id = "endpoint_and"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        

        MATCH (a), (b)
        WHERE a.id = "search_ts" AND b.id = "endpoint_average"
        CREATE (a)-[:DEFINES {description: "Establishes or declares the target"}]->(b)
        